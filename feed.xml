<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://optreal.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://optreal.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-22T14:28:55+00:00</updated><id>https://optreal.github.io/feed.xml</id><title type="html">Optreal</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Quantum Virtual Link Generation via Reinforcement Learning</title><link href="https://optreal.github.io/blog/2024/quantum_vl/" rel="alternate" type="text/html" title="Quantum Virtual Link Generation via Reinforcement Learning"/><published>2024-12-22T00:00:00+00:00</published><updated>2024-12-22T00:00:00+00:00</updated><id>https://optreal.github.io/blog/2024/quantum_vl</id><content type="html" xml:base="https://optreal.github.io/blog/2024/quantum_vl/"><![CDATA[<h3 id="abstract">Abstract</h3> <ul> <li>Quantum networks leverage quantum entanglement as a fundamental building block.</li> <li>When two qubits are entangled, their states exhibit non-classical correlations, enabling novel applications such as quantum key distribution and distributed quantum computing, which are not possible with classical communication.</li> <li>However, <u>quantum entanglement is a probabilistic process heavily dependent on the characteristics of the involved devices</u>, such as optical fibers, lasers, and quantum memories.</li> <li>Managing this process to maintain entanglement with high quality for as long as possible is a <strong>stochastic control problem</strong>.</li> <li>This process can be modeled as a MDP and solved using the RL framework.</li> <li>In this work, we employ RL to develop an <strong>entanglement management policy</strong> that surpasses the current State-of-the-Art policies, particularly in scenarios where precise models of the quantum devices are unavailable.</li> <li>Reference: <a class="citation" href="#a10207249">(Aparicio-Pardo et al., 2023)</a></li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2024-12-22-quantum_vl/link-480.webp 480w,/assets/img/blogs/2024-12-22-quantum_vl/link-800.webp 800w,/assets/img/blogs/2024-12-22-quantum_vl/link-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2024-12-22-quantum_vl/link.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/> <h3 id="introduction">Introduction</h3> <p>In the last years, the application of quantum physics principles to computer networks is gaining momentum among the research and industry communities, as shown by the first attempts of standardisation of a so-called “Quantum Internet” <a class="citation" href="#rfc9340">(Kozlowski et al., 2023)</a>, <a class="citation" href="#rfc9583">(Wang et al., 2024)</a> by the Internet Engineering Task Force (IETF).</p> <p>Amongst these principle the quantum entanglement has been identified as fundamental resource for Quantum Communication <a class="citation" href="#rfc9340">(Kozlowski et al., 2023)</a>, since it enables the Quantum Internet applications, as secure cryptographic key distribution and, distributed quantum computing <a class="citation" href="#rfc9583">(Wang et al., 2024)</a>.</p> <p>But, quantum entanglement is a probabilistic process strongly dependent on the features of the involved communication devices. Consequently, the entanglement management constitutes a stochastic control problem that can be formulated as a Markov Decision Process (MDP) [3]. In this preliminary work, we investigate the capacity of Deep Reinforcement Learning (DRL) to solve these problems, in particular, when a quantum entanglement is set up between two remote communication nodes not directly connected by a link. In the paragraphs below, we will introduce the required background.</p> <p>Qubit and entanglement. In quantum communication and quantum computing, the counterpart of a classical bit is the quantum bit (or qubit). But, whereas the classic bit can take either the “0” state or the “1” state, the qubit can be in a superposition of the two, with a certain probability to be at one of the states. The qubit exists in this superposition until its eventual measurement. Afterwards, it will take the “0” value or “1” value according to the corresponding probability. When two qubits are entangled, their individual states cannot be described in a separated way: a state change, i.e., a qubit reading measurement, in one of them implicitly comes with a change in the other one, regardless of the physical distance between them. Thus, the measurements at the two entangled qubits exhibit non-classical correlations used to design new applications not possible with classical communication, such us quantum key distribution or distributed quantum computation. Quantum network. A set of nodes able to exchange qubits and distribute entangled states amongst themselves is defined as a quantum network in the RFC [1]. These quantum nodes are connected each other by optical fiber or satellite laser links. In this paper, we assume fiber links. When, an entanglement is set up between two qubits located at two adjacent quantum nodes connected by a direct link (e.g., between nodes A and B in Fig. 1), the entanglement constitues an elementary quantum link [1]. Its success probability Pe exponentially decreases with distance, which means that short-distance entanglements (like A-B, in Fig. 1) are more likely to succeed than long-distance entanglements (like A-C, in Fig. 1). To overcome this issue, we can create a virtual link [1] over two elementary links via the so-called entanglement swapping [1], [4]. This process allows creating long-distance entangled pairs by consuming the previously generated elementary links on the path between two further end-points. In Fig. 1, the elementary links A-B and B-C are consumed to create a longer virtual link A-C. Quantum nodes (as B in Fig. 1) that create long-distance entangled pairs via entanglement swapping are called quantum repeaters [1] and they must store intermediate elementary links on the so-called quantum memories [1] to be consumed later. Quantum memory lifetimes. The probability that a qubit stored in a quantum memory is still, after a certain time, in its original state (e.g., an entangled state) decreases with time [5]. This probability is referred as to memory efficiency ηm [5], and its decay is known as decoherence. This process is the consequence of the progressive interactions of the quantum memory with the environment, since a memory cannot be perfectly isolated from it. The entanglement swapping success probability Ps depends on the memory efficiency ηm of the oldest loaded quantum memory involved in the swapping [6]. This paper, as far as we know, is one of the first works modelling a quantum virtual link generation process as a classical MDP and using a DRL algorithm to find an optimal generation policy tracking the age of the elementary links. This supposes an innovative contribution with respect to the related works, where this age of the elementary are not used in the generation procedures. Related works are presented in Section 2. The MDP modelling the virtual link generation along with the DRL approach used to solve it are described in Section 3. Numerical results and experiment settings are shown in Section 4. Section 5 concludes the article.</p>]]></content><author><name></name></author><category term="Quantum"/><category term="Networks"/><category term="Quantum,"/><category term="Reinforcement"/><category term="Learning"/><summary type="html"><![CDATA[Quantum Virtual Link Generation via Reinforcement Learning]]></summary></entry><entry><title type="html">UDC</title><link href="https://optreal.github.io/blog/2024/tabs-ttt/" rel="alternate" type="text/html" title="UDC"/><published>2024-11-26T00:32:13+00:00</published><updated>2024-11-26T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs-ttt</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs-ttt/"><![CDATA[<h3 id="abstract">Abstract</h3> <p><strong>Single-Stage Neural Combinatorial Optimization Solvers</strong></p> <ul> <li>Exhibit significant performance degradation when applied to large-scale combinatorial optimization (CO) problems.</li> </ul> <p><strong>Two-Stage Neural Methods</strong></p> <ul> <li>Inspired by Divide-and-Conquer strategies.</li> <li>Efficient in addressing large-scale CO problems but rely heavily on problem-specific heuristics in either the dividing or conquering phase, limiting general applicability.</li> <li>Typically, employ separate training schemes, overlooking interdependencies between the two phases, often leading to convergence to suboptimal solutions.</li> </ul> <p>Unified Neural Divide-and-Conquer Framework (UDC)</p> <ul> <li>Introduces the Divide-Conquer-Reunion (DCR) training method to address issues arising from suboptimal dividing policies.</li> <li>Utilizes a lightweight Graph Neural Network (GNN) to decompose large-scale CO instances.</li> <li>Employs a constructive solver to conquer the divided sub-problems effectively. Demonstrates extensive applicability to diverse CO problems.</li> <li>Achieves superior performance across 10 representative large-scale CO problems.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_1-480.webp 480w,/assets/img/table_1-800.webp 800w,/assets/img/table_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="introduction">Introduction</h3> <p><strong>Combinatorial Optimization (CO) Applications</strong></p> <ul> <li>Route planning</li> <li>Circuit design</li> <li>Biology</li> </ul> <p><strong>Reinforcement Learning (RL)-based Constructive Neural Combinatorial Optimization (NCO) Methods</strong></p> <ul> <li>Generate near-optimal solutions for small-scale instances (e.g., TSP instances with up to 200 nodes) without requiring expert knowledge.</li> <li>Construct solutions in an end-to-end manner, node-by-node.</li> <li>Limited capability when applied to large-scale instances.</li> </ul> <p><strong>Categories of NCO Methods</strong></p> <ol> <li><strong>Modified Single-Stage Solvers</strong> <ul> <li>Methods like BQ-NCO and LEHD develop sub-path construction using heavy decoders.</li> <li>Require supervised learning (SL), limiting applicability when high-quality labeled solutions are unavailable.</li> </ul> </li> <li><strong>Auxiliary Information for RL-Based Solvers</strong> <ul> <li>Methods like ELG, ICAM, and DAR use auxiliary information to guide solvers.</li> <li>Problem-specific auxiliary designs limit general applicability.</li> <li>Complexity issues arise, particularly with self-attention mechanisms (e.g., \(O(N^2)\) complexity).</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Inspired by traditional heuristic divide-and-conquer methods.</li> <li>Use a two-stage approach: dividing the instance and conquering sub-problems.</li> <li>Methods like TAM, H-TSP, and GLOP show improved efficiency in large-scale TSP and CVRP problems.</li> </ul> </li> </ol> <p><strong>Challenges in Large-Scale NCO</strong></p> <ul> <li>Heavy models requiring SL are limited by the availability of labeled solutions.</li> <li>Self-attention complexity \(O(N^2)\) hinders scalability.</li> <li>Problem-specific auxiliary information limits general applicability.</li> </ul> <h3 id="shortcomings-of-neural-divide-and-conquer-approaches">Shortcomings of Neural Divide-and-Conquer Approaches</h3> <p><strong>Limitations in Applicability and Solution Quality</strong></p> <ul> <li>Rely on problem-specific heuristics in either the dividing (e.g., GLOP, SO) or conquering (e.g., L2D, RBG) stages, which limits generalizability.</li> </ul> <p><strong>Issues with Separate Training Process</strong></p> <ul> <li>Dividing and conquering policies are trained separately, which fails to consider their interdependencies, often resulting in convergence to local optima.</li> </ul> <p><strong>Importance of Mitigating Sub-Optimal Dividing Impact</strong></p> <ul> <li>Addressing suboptimal dividing is crucial for achieving high-quality solutions.</li> </ul> <h3 id="proposed-approach">Proposed Approach</h3> <p><strong>Divide-Conquer-Reunion (DCR)</strong></p> <ul> <li>A novel RL-based training method designed to consider interdependencies between dividing and conquering stages.</li> </ul> <p><strong>Unified Neural Divide-and-Conquer Framework (UDC)</strong></p> <ul> <li>Incorporates DCR in a unified training scheme.</li> <li>Uses a lightweight GNN to efficiently decompose large-scale instances into manageable sub-problems.</li> <li>Constructive solvers then effectively solve these sub-problems.</li> </ul> <p><strong>Contributions</strong></p> <ul> <li>Propose DCR to mitigate the impact of suboptimal dividing policies.</li> <li>Achieve a unified training scheme in UDC, leading to improved performance.</li> <li>Demonstrate UDC’s applicability across various CO problems.</li> </ul> <hr/> <h3 id="preliminaries-neural-divide-and-conquer">Preliminaries: Neural Divide-and-Conquer</h3> <p><strong>CO Problem Definition</strong></p> <ul> <li>Involves $N$ decision variables.</li> <li>Objective: Minimize function \(f(x, \mathcal{G})\), where $G$ is the CO instance, and \(\Omega\) is the set of feasible solutions.</li> </ul> \[\text{minimize}_ f(x, \mathcal{G})\] <p><strong>Divide-and-Conquer in CO</strong></p> <ul> <li><strong>Traditional Methods</strong> <ul> <li>Use heuristic algorithms like large-neighborhood-search to divide and conquer.</li> <li>Dividing stage selects sub-problems, and conquering stage repairs sub-problems.</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Dividing policy \(\pi_d(\mathcal{G})\) decomposes instance $G$ into sub-problems.</li> <li>Conquering policy \(\pi_c\) solves each sub-problem, and the total solution is obtained by concatenating sub-solutions.</li> </ul> </li> </ul> <h3 id="constructive-neural-solver">Constructive Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Efficient for small-scale CO problems.</li> <li>Uses an attention-based encoder-decoder network to construct solutions.</li> </ul> <p><strong>Training Process</strong></p> <ul> <li>Modeled as a Markov Decision Process (MDP).</li> <li>Trained using Deep Reinforcement Learning (DRL) without expert experience.</li> </ul> <p><strong>Solution Generation</strong></p> <ul> <li>Constructs solutions step-by-step using a trained policy \(\pi\).</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = \prod_{t=1}^{\tau} p_{\theta}(x_t \mid x_{1:t-1}, \mathcal{G}, \Omega)\] <h3 id="heatmap-based-neural-solver">Heatmap-Based Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Uses lightweight GNNs for problem-solving, especially for large-scale CO problems like VRPs.</li> </ul> <p><strong>Limitations</strong></p> <ul> <li><strong>Non-Autoregressive Generation</strong>: Lacks partial solution order information, which can lead to poor solution quality.</li> <li><strong>Search Algorithm Dependence</strong>: Relies on search algorithms for high-quality solutions.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = p_{\theta}(\mathcal{H} \mid \mathcal{G}, \Omega) p(x_1) \prod_{t=2}^{\tau} \frac{\exp(\mathcal{H}_{x_{t-1}, x_t})}{\sum_{i=t}^{N} \exp(\mathcal{H}_{x_{t-1}, x_i})},\] <hr/> <h3 id="methodology-unified-divide-and-conquer-udc">Methodology: Unified Divide-and-Conquer (UDC)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_1-480.webp 480w,/assets/img/figure_1-800.webp 800w,/assets/img/figure_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="general-framework">General Framework</h4> <ul> <li><strong>Two Stages</strong>: Dividing and Conquering.</li> <li><strong>Dividing Stage</strong>: Generates initial solutions using an Anisotropic GNN (AGNN).</li> <li><strong>Conquering Stage</strong>: Decomposes the original instance into sub-problems and solves them using constructive neural solvers.</li> </ul> <p><strong>Solver Integration</strong></p> <ul> <li>Different solvers are used based on the type of CO problem.</li> <li><strong>AGNN</strong> for Maximum Independent Set (MIS).</li> <li><strong>POMO</strong> for Vehicle Routing Problem (VRP).</li> <li><strong>ICAM</strong> for 0-1 Knapsack Problem (KP).</li> </ul> <p><strong>Dividing Stage</strong></p> \[\pi_d(x_0|\mathcal{G}_D, \Omega, \phi) = \begin{cases} p(\mathcal{H}|\mathcal{G}_D, \Omega, \phi) p(x_{0,1}) \prod_{t=2}^\tau \frac{\exp(\mathcal{H}_{x_0, t-1, x_0, t})}{\sum_{i=t}^N \exp(\mathcal{H}_{x_0, t-1, x_0, i})}, &amp; \text{if } x_0 \in \Omega \\ 0, &amp; \text{otherwise} \end{cases}\] <ul> <li>original CO instance \(\mathcal{G}\)</li> <li>sparse graph \(\mathcal{G}_D = \{ \mathbb{V}, \mathbb{E} \}\)</li> <li>parameter $$\phi$ of Anisotropic Graph Neural Networks (AGNN)</li> <li>heatmap \(\mathcal{H}\) (e.g For \(N\)-node VRPs, the heatmap \(\mathcal{H} \in \mathbb{R}^{N×N}\) )</li> <li>initial solution \(x_0 = (x_{0,1},...,x_{0,\tau})\), \(\tau\) is length</li> </ul> <p><strong>Conquering Stage: Sub-problem Preparation</strong></p> <ul> <li>sub-problems \(\{ \mathcal{G}_1,..., \mathcal{G}_{\lfloor \frac{N}{n} \rfloor} \}\)</li> <li>\(\{ \Omega_1,..., \Omega_{\lfloor \frac{N}{n} \rfloor} \}\) constraints of sub-problems (e.g no self-loop in sub-TSPs)</li> </ul> <p><strong>Conquering Stage: Constructive Neural Conquering</strong></p> <p>\(\pi_c(s_k|\mathcal{G}_k, \Omega_k, \theta) = \begin{cases} \prod_{t=1}^n p(s_{k,t} | s_{k,1:t-1}, \mathcal{G}_k, \Omega_k, \theta), &amp; \text{if } s_k \in \Omega_k \\ 0, &amp; \text{otherwise} \end{cases}\)</p> <ul> <li>utilize constructive solvers with parameter $$\theta$ for most involved sub-CO problems.</li> <li>sub-solution \(s_{k} = (s_{k,1},...,s_{k,n})\), $k \in { 1,…, \lfloor \frac{N}{n} \rfloor}$$</li> <li>conquering policy \(\pi_c\)</li> <li>Replacement of original solution fragments in the final conquering stage: sub-solutions with improvements on the objective function replace the original solution fragment in \(x_0\)</li> <li>Formation of merged solution: the merged solution becomes \(x_1\)</li> <li>Repeated execution of conquering stage: conquering stage can be executed repeatedly on the new merged solution</li> <li>Gradual improvement in solution quality: the solution after \(r\) conquering stages is noted as \(x_r\)</li> </ul> <h3 id="training-method-divide-conquer-reunion-dcr">Training Method: Divide-Conquer-Reunion (DCR)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_2-480.webp 480w,/assets/img/figure_2-800.webp 800w,/assets/img/figure_2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Dividing and conquering stages modeled as MDPs.</li> <li>Separate training for conquering and dividing policies.</li> <li>Need for problem-specific datasets.</li> <li>Lack of collaboration in optimizing policies.</li> <li>Impact of sub-optimal sub-problem decomposition.</li> <li>Divide-Conquer-Reunion (DCR) process introduction.</li> <li>Additional Reunion step for better integration of sub-problems.</li> <li>Improved stability and convergence in training.</li> <li>Use of REINFORCE algorithm for unified training.</li> <li>Baseline calculation for both dividing and conquering policies.</li> </ul> <p>\(\nabla \mathcal{L}d(\mathcal{G}) = \frac{1}{\alpha} \sum_{i=1}^\alpha\) \(\left( f(x_2^i, \mathcal{G}) - \frac{1}{\alpha} \sum_{j=1}^\alpha f(x_2^j, \mathcal{G}) \right) \nabla \log \pi_d(x_2^i|\mathcal{G}_D, \Omega, \phi)\) \(\nabla \mathcal{L}{c1}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{1,i}, \mathcal{G}_{c}^0) - \frac{1}{\beta} \sum_{j=1}^\beta f{\prime}(s_{c}^{1,j}, \mathcal{G}_{c}^0) \right) \nabla \log \pi_c(s_{c}^{1,j}|\mathcal{G}_{c}^0, \Omega_{c}, \theta) \right)\) \(\nabla \mathcal{L}{c2}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{2,i}, \mathcal{G}_{c}^1) - \frac{1}{\beta} \sum_{j=1}^\beta f{\prime}(s_{c}^{2,j}, \mathcal{G}_{c}^1) \right) \nabla \log \pi_c(s_{c}^{2,j}|\mathcal{G}_{c}^1, \Omega_{c}, \theta) \right)\)</p> <ul> <li>\(\{ x_2^1, ..., x_{2}^{\alpha} \}\) represents the \(\alpha\) sampled solutions.</li> <li>there are \(\alpha \lfloor \frac{N}{n} \rfloor$ sub-problems\)\mathcal{G}^{0}<em>{c},c \in { 1, …, \lfloor \frac{N}{n} \rfloor, …, \alpha \lfloor \frac{N}{n} \rfloor}\(generated based on\){ x_0^1, …, x</em>{0}^{\alpha} }$$ in the first conquering stage</li> <li>\(\alpha \lfloor \frac{N}{n} \rfloor\) can be regarded as the batch size of sub-problems</li> <li>The \(\beta\) sampled sub-solutions for sub-problem \(\mathcal{G}_{c}^{0}, \mathcal{G}_{c}^{1},c \in \{1,..., \alpha \lfloor \frac{N}{n} \rfloor\}\) are noted as \(\{s_{c}^{1,i},...,s_{c}^{1,\beta}\},\{s_{c}^{2,i},...,s_{c}^{2,i}\}\).</li> </ul> <p><strong>Challenges and Proposed Solution</strong></p> <ul> <li>Existing methods fail to train dividing and conquering policies simultaneously, leading to unsolvable antagonisms.</li> <li><strong>Unified Training Requirement</strong>: DCR enables collaborative optimization of dividing and conquering policies by treating connections between sub-problems as new problems to reconquer.</li> </ul> <p><strong>Training Process with REINFORCE</strong></p> <ul> <li>Uses the REINFORCE algorithm to train both dividing and conquering policies, ensuring better reward estimation and improved convergence.</li> </ul> <h3 id="application-general-co-problems">Application: General CO Problems</h3> <p><strong>Conditions for Applicability</strong></p> <ol> <li><strong>Decomposable Objective Functions</strong>: The objective function must contain decomposable aggregate functions (i.e., no functions like Rank or Top-k).</li> <li><strong>Feasibility of Initial and Sub-Solutions</strong>: Ensured using feasibility masks.</li> <li><strong>Non-Uniqueness of Sub-Problem Solutions</strong>: Solutions for sub-problems should not be unique to ensure flexibility in merging sub-solutions.</li> </ol> <p><strong>Limitations</strong></p> <ul> <li>Complex CO problems may face issues where solutions cannot be guaranteed as legal through the process, limiting applicability.</li> <li>Problems such as TSPTW may have constraints that make ensuring legal initial and sub-solutions difficult.</li> </ul> <hr/> <h3 id="experiment">Experiment</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_2-480.webp 480w,/assets/img/table_2-800.webp 800w,/assets/img/table_2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_3-480.webp 480w,/assets/img/table_3-800.webp 800w,/assets/img/table_3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_4-480.webp 480w,/assets/img/table_4-800.webp 800w,/assets/img/table_4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_3-480.webp 480w,/assets/img/figure_3-800.webp 800w,/assets/img/figure_3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Overview</strong></p> <ul> <li>To verify the applicability and efficiency of UDC, experiments were conducted across 10 different CO problems, including TSP, CVRP, KP, MIS, and more.</li> <li>UDC was compared to both classical and neural solvers.</li> </ul> <p><strong>Performance Evaluation</strong></p> <ul> <li>UDC demonstrated superior performance in terms of solution quality and computational efficiency across large-scale CO instances, ranging from 500-node to 2,000-node problems.</li> </ul> <p><strong>Comparison to Baselines</strong></p> <ul> <li>Classical solvers like LKH and other neural methods (e.g., ELG, GLOP) were used as baselines.</li> <li>UDC consistently outperformed other methods, particularly in large-scale settings where scalability is critical.</li> </ul> <hr/> <h3 id="conclusion">Conclusion</h3> <p><strong>Summary</strong></p> <ul> <li>UDC, with its novel DCR training mechanism, successfully addresses the limitations of existing neural divide-and-conquer methods for large-scale CO problems.</li> <li>The unified training scheme ensures that both dividing and conquering stages work in synergy, thereby achieving better overall optimization.</li> </ul> <p><strong>Future Work</strong></p> <ul> <li>Further improvements can be made by designing better loss functions for training.</li> <li>Extending UDC’s applicability to other complex CO problems not covered in the current study is another promising direction for future research.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems</title><link href="https://optreal.github.io/blog/2024/udc/" rel="alternate" type="text/html" title="A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://optreal.github.io/blog/2024/udc</id><content type="html" xml:base="https://optreal.github.io/blog/2024/udc/"><![CDATA[<h3 id="abstract">Abstract</h3> <p><strong>Single-Stage Neural Combinatorial Optimization Solvers</strong></p> <ul> <li>Exhibit significant performance degradation when applied to large-scale combinatorial optimization (CO) problems.</li> </ul> <p><strong>Two-Stage Neural Methods</strong></p> <ul> <li>Inspired by Divide-and-Conquer strategies.</li> <li>Efficient in addressing large-scale CO problems but rely heavily on problem-specific heuristics in either the dividing or conquering phase, limiting general applicability.</li> <li>Typically, employ separate training schemes, overlooking interdependencies between the two phases, often leading to convergence to suboptimal solutions.</li> </ul> <p>Unified Neural Divide-and-Conquer Framework (UDC)</p> <ul> <li>Introduces the Divide-Conquer-Reunion (DCR) training method to address issues arising from suboptimal dividing policies.</li> <li>Utilizes a lightweight Graph Neural Network (GNN) to decompose large-scale CO instances.</li> <li>Employs a constructive solver to conquer the divided sub-problems effectively. Demonstrates extensive applicability to diverse CO problems.</li> <li>Achieves superior performance across 10 representative large-scale CO problems.</li> </ul> <p><img src="assets/udc_img/table_1.png" alt="poster"/></p> <hr/> <h3 id="introduction">Introduction</h3> <p><strong>Combinatorial Optimization (CO) Applications</strong></p> <ul> <li>Route planning</li> <li>Circuit design</li> <li>Biology</li> </ul> <p><strong>Reinforcement Learning (RL)-based Constructive Neural Combinatorial Optimization (NCO) Methods</strong></p> <ul> <li>Generate near-optimal solutions for small-scale instances (e.g., TSP instances with up to 200 nodes) without requiring expert knowledge.</li> <li>Construct solutions in an end-to-end manner, node-by-node.</li> <li>Limited capability when applied to large-scale instances.</li> </ul> <p><strong>Categories of NCO Methods</strong></p> <ol> <li><strong>Modified Single-Stage Solvers</strong> <ul> <li>Methods like BQ-NCO and LEHD develop sub-path construction using heavy decoders.</li> <li>Require supervised learning (SL), limiting applicability when high-quality labeled solutions are unavailable.</li> </ul> </li> <li><strong>Auxiliary Information for RL-Based Solvers</strong> <ul> <li>Methods like ELG, ICAM, and DAR use auxiliary information to guide solvers.</li> <li>Problem-specific auxiliary designs limit general applicability.</li> <li>Complexity issues arise, particularly with self-attention mechanisms (e.g., $O(N^2)$ complexity).</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Inspired by traditional heuristic divide-and-conquer methods.</li> <li>Use a two-stage approach: dividing the instance and conquering sub-problems.</li> <li>Methods like TAM, H-TSP, and GLOP show improved efficiency in large-scale TSP and CVRP problems.</li> </ul> </li> </ol> <p><strong>Challenges in Large-Scale NCO</strong></p> <ul> <li>Heavy models requiring SL are limited by the availability of labeled solutions.</li> <li>Self-attention complexity $O(N^2)$ hinders scalability.</li> <li>Problem-specific auxiliary information limits general applicability.</li> </ul> <h3 id="shortcomings-of-neural-divide-and-conquer-approaches">Shortcomings of Neural Divide-and-Conquer Approaches</h3> <p><strong>Limitations in Applicability and Solution Quality</strong></p> <ul> <li>Rely on problem-specific heuristics in either the dividing (e.g., GLOP, SO) or conquering (e.g., L2D, RBG) stages, which limits generalizability.</li> </ul> <p><strong>Issues with Separate Training Process</strong></p> <ul> <li>Dividing and conquering policies are trained separately, which fails to consider their interdependencies, often resulting in convergence to local optima.</li> </ul> <p><strong>Importance of Mitigating Sub-Optimal Dividing Impact</strong></p> <ul> <li>Addressing suboptimal dividing is crucial for achieving high-quality solutions.</li> </ul> <h3 id="proposed-approach">Proposed Approach</h3> <p><strong>Divide-Conquer-Reunion (DCR)</strong></p> <ul> <li>A novel RL-based training method designed to consider interdependencies between dividing and conquering stages.</li> </ul> <p><strong>Unified Neural Divide-and-Conquer Framework (UDC)</strong></p> <ul> <li>Incorporates DCR in a unified training scheme.</li> <li>Uses a lightweight GNN to efficiently decompose large-scale instances into manageable sub-problems.</li> <li>Constructive solvers then effectively solve these sub-problems.</li> </ul> <p><strong>Contributions</strong></p> <ul> <li>Propose DCR to mitigate the impact of suboptimal dividing policies.</li> <li>Achieve a unified training scheme in UDC, leading to improved performance.</li> <li>Demonstrate UDC’s applicability across various CO problems.</li> </ul> <hr/> <h3 id="preliminaries-neural-divide-and-conquer">Preliminaries: Neural Divide-and-Conquer</h3> <p><strong>CO Problem Definition</strong></p> <ul> <li>Involves $N$ decision variables.</li> <li>Objective: Minimize function $f(x, G)$, where $G$ is the CO instance, and $\Omega$ is the set of feasible solutions. \(\text{minimize}_ f(x, \mathcal{G})\)</li> </ul> <p><strong>Divide-and-Conquer in CO</strong></p> <ul> <li><strong>Traditional Methods</strong> <ul> <li>Use heuristic algorithms like large-neighborhood-search to divide and conquer.</li> <li>Dividing stage selects sub-problems, and conquering stage repairs sub-problems.</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Dividing policy $\pi_d(G)$ decomposes instance $G$ into sub-problems.</li> <li>Conquering policy $\pi_c$ solves each sub-problem, and the total solution is obtained by concatenating sub-solutions.</li> </ul> </li> </ul> <h3 id="constructive-neural-solver">Constructive Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Efficient for small-scale CO problems.</li> <li>Uses an attention-based encoder-decoder network to construct solutions.</li> </ul> <p><strong>Training Process</strong></p> <ul> <li>Modeled as a Markov Decision Process (MDP).</li> <li>Trained using Deep Reinforcement Learning (DRL) without expert experience.</li> </ul> <p><strong>Solution Generation</strong></p> <ul> <li>Constructs solutions step-by-step using a trained policy $\pi$.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = \prod_{t=1}^{\tau} p_{\theta}(x_t \mid x_{1:t-1}, \mathcal{G}, \Omega)\] <h3 id="heatmap-based-neural-solver">Heatmap-Based Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Uses lightweight GNNs for problem-solving, especially for large-scale CO problems like VRPs.</li> </ul> <p><strong>Limitations</strong></p> <ul> <li><strong>Non-Autoregressive Generation</strong>: Lacks partial solution order information, which can lead to poor solution quality.</li> <li><strong>Search Algorithm Dependence</strong>: Relies on search algorithms for high-quality solutions.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = p_{\theta}(\mathcal{H} \mid \mathcal{G}, \Omega) p(x_1) \prod_{t=2}^{\tau} \frac{\exp(\mathcal{H}_{x_{t-1}, x_t})}{\sum_{i=t}^{N} \exp(\mathcal{H}_{x_{t-1}, x_i})},\] <hr/> <h3 id="methodology-unified-divide-and-conquer-udc">Methodology: Unified Divide-and-Conquer (UDC)</h3> <p><img src="udc_img/figure_1.png" alt="poster"/></p> <h4 id="general-framework">General Framework</h4> <ul> <li><strong>Two Stages</strong>: Dividing and Conquering.</li> <li><strong>Dividing Stage</strong>: Generates initial solutions using an Anisotropic GNN (AGNN).</li> <li><strong>Conquering Stage</strong>: Decomposes the original instance into sub-problems and solves them using constructive neural solvers.</li> </ul> <p><strong>Solver Integration</strong></p> <ul> <li>Different solvers are used based on the type of CO problem.</li> <li><strong>AGNN</strong> for Maximum Independent Set (MIS).</li> <li><strong>POMO</strong> for Vehicle Routing Problem (VRP).</li> <li><strong>ICAM</strong> for 0-1 Knapsack Problem (KP).</li> </ul> <p><strong>Dividing Stage</strong></p> \[\pi_d(x_0|\mathcal{G}_D, \Omega, \phi) = \begin{cases} p(\mathcal{H}|\mathcal{G}_D, \Omega, \phi) p(x_{0,1}) \prod_{t=2}^\tau \frac{\exp(\mathcal{H}_{x_0, t-1, x_0, t})}{\sum_{i=t}^N \exp(\mathcal{H}_{x_0, t-1, x_0, i})}, &amp; \text{if } x_0 \in \Omega \\ 0, &amp; \text{otherwise} \end{cases}\] <ul> <li>original CO instance $\mathcal{G}$</li> <li>sparse graph $\mathcal{G}_D = { \mathbb{V}, \mathbb{E} }$</li> <li>parameter $\phi$ of Anisotropic Graph Neural Networks (AGNN)</li> <li>heatmap $\mathcal{H}$ (e.g For $N$-node VRPs, the heatmap $\mathcal{H} \in \mathbb{R}^{N×N}$ )</li> <li>initial solution $x_0 = (x_{0,1},…,x_{0,\tau})$, $\tau$ is length</li> </ul> <p><strong>Conquering Stage: Sub-problem Preparation</strong></p> <ul> <li>sub-problems ${ \mathcal{G}<em>1,…, \mathcal{G}</em>{\lfloor \frac{N}{n} \rfloor} }$</li> <li>${ \Omega_1,…, \Omega_{\lfloor \frac{N}{n} \rfloor} }$ constraints of sub-problems (e.g no self-loop in sub-TSPs)</li> </ul> <p><strong>Conquering Stage: Constructive Neural Conquering</strong></p> <p>\(\pi_c(s_k|\mathcal{G}_k, \Omega_k, \theta) = \begin{cases} \prod_{t=1}^n p(s_{k,t} | s_{k,1:t-1}, \mathcal{G}_k, \Omega_k, \theta), &amp; \text{if } s_k \in \Omega_k \\ 0, &amp; \text{otherwise} \end{cases}\)</p> <ul> <li>utilize constructive solvers with parameter $\theta$ for most involved sub-CO problems.</li> <li>sub-solution $s_{k} = (s_{k,1},…,s_{k,n})$, $k \in { 1,…, \lfloor \frac{N}{n} \rfloor}$</li> <li>conquering policy $\pi_c$</li> <li>Replacement of original solution fragments in the final conquering stage: sub-solutions with improvements on the objective function replace the original solution fragment in $x_0$</li> <li>Formation of merged solution: the merged solution becomes $x_1$</li> <li>Repeated execution of conquering stage: conquering stage can be executed repeatedly on the new merged solution</li> <li>Gradual improvement in solution quality: the solution after $r$ conquering stages is noted as $x_r$</li> </ul> <h3 id="training-method-divide-conquer-reunion-dcr">Training Method: Divide-Conquer-Reunion (DCR)</h3> <p><img src="udc_img/figure_2.png" alt="poster"/></p> <ul> <li>Dividing and conquering stages modeled as MDPs.</li> <li>Separate training for conquering and dividing policies.</li> <li>Need for problem-specific datasets.</li> <li>Lack of collaboration in optimizing policies.</li> <li>Impact of sub-optimal sub-problem decomposition.</li> <li>Divide-Conquer-Reunion (DCR) process introduction.</li> <li>Additional Reunion step for better integration of sub-problems.</li> <li>Improved stability and convergence in training.</li> <li>Use of REINFORCE algorithm for unified training.</li> <li>Baseline calculation for both dividing and conquering policies.</li> </ul> <table> <tbody> <tr> <td>$$\nabla \mathcal{L}d(\mathcal{G}) = \frac{1}{\alpha} \sum_{i=1}^\alpha \left( f(x_2^i, \mathcal{G}) - \frac{1}{\alpha} \sum_{j=1}^\alpha f(x_2^j, \mathcal{G}) \right) \nabla \log \pi_d(x_2^i</td> <td>\mathcal{G}_D, \Omega, \phi) $$</td> </tr> <tr> <td>$$\nabla \mathcal{L}{c1}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{1,i}, \mathcal{G}<em>{c}^0) - \frac{1}{\beta} \sum</em>{j=1}^\beta f{\prime}(s_{c}^{1,j}, \mathcal{G}<em>{c}^0) \right) \nabla \log \pi_c(s</em>{c}^{1,j}</td> <td>\mathcal{G}<em>{c}^0, \Omega</em>{c}, \theta) \right)$$</td> </tr> <tr> <td>$$\nabla \mathcal{L}{c2}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{2,i}, \mathcal{G}<em>{c}^1) - \frac{1}{\beta} \sum</em>{j=1}^\beta f{\prime}(s_{c}^{2,j}, \mathcal{G}<em>{c}^1) \right) \nabla \log \pi_c(s</em>{c}^{2,j}</td> <td>\mathcal{G}<em>{c}^1, \Omega</em>{c}, \theta) \right)$$</td> </tr> </tbody> </table> <ul> <li>${ x_2^1, …, x_{2}^{\alpha} }$ represents the $\alpha$ sampled solutions.</li> <li>there are $\alpha \lfloor \frac{N}{n} \rfloor$ sub-problems $\mathcal{G}^{0}<em>{c},c \in { 1, …, \lfloor \frac{N}{n} \rfloor, …, \alpha \lfloor \frac{N}{n} \rfloor}$ generated based on ${ x_0^1, …, x</em>{0}^{\alpha} }$ in the first conquering stage</li> <li>$\alpha \lfloor \frac{N}{n} \rfloor$ can be regarded as the batch size of sub-problems</li> <li>The $\beta$ sampled sub-solutions for sub-problem $\mathcal{G}<em>{c}^{0}, \mathcal{G}</em>{c}^{1},c \in {1,…, \alpha \lfloor \frac{N}{n} \rfloor}$ are noted as ${s_{c}^{1,i},…,s_{c}^{1,\beta}},{s_{c}^{2,i},…,s_{c}^{2,i}}$.</li> </ul> <p><strong>Challenges and Proposed Solution</strong></p> <ul> <li>Existing methods fail to train dividing and conquering policies simultaneously, leading to unsolvable antagonisms.</li> <li><strong>Unified Training Requirement</strong>: DCR enables collaborative optimization of dividing and conquering policies by treating connections between sub-problems as new problems to reconquer.</li> </ul> <p><strong>Training Process with REINFORCE</strong></p> <ul> <li>Uses the REINFORCE algorithm to train both dividing and conquering policies, ensuring better reward estimation and improved convergence.</li> </ul> <h3 id="application-general-co-problems">Application: General CO Problems</h3> <p><strong>Conditions for Applicability</strong></p> <ol> <li><strong>Decomposable Objective Functions</strong>: The objective function must contain decomposable aggregate functions (i.e., no functions like Rank or Top-k).</li> <li><strong>Feasibility of Initial and Sub-Solutions</strong>: Ensured using feasibility masks.</li> <li><strong>Non-Uniqueness of Sub-Problem Solutions</strong>: Solutions for sub-problems should not be unique to ensure flexibility in merging sub-solutions.</li> </ol> <p><strong>Limitations</strong></p> <ul> <li>Complex CO problems may face issues where solutions cannot be guaranteed as legal through the process, limiting applicability.</li> <li>Problems such as TSPTW may have constraints that make ensuring legal initial and sub-solutions difficult.</li> </ul> <hr/> <h3 id="experiment">Experiment</h3> <p><img src="udc_img/table_2.png" alt="poster"/> <img src="udc_img/table_3.png" alt="poster"/> <img src="udc_img/table_4.png" alt="poster"/> <img src="udc_img/figure_3.png" alt="poster"/></p> <p><strong>Overview</strong></p> <ul> <li>To verify the applicability and efficiency of UDC, experiments were conducted across 10 different CO problems, including TSP, CVRP, KP, MIS, and more.</li> <li>UDC was compared to both classical and neural solvers.</li> </ul> <p><strong>Performance Evaluation</strong></p> <ul> <li>UDC demonstrated superior performance in terms of solution quality and computational efficiency across large-scale CO instances, ranging from 500-node to 2,000-node problems.</li> </ul> <p><strong>Comparison to Baselines</strong></p> <ul> <li>Classical solvers like LKH and other neural methods (e.g., ELG, GLOP) were used as baselines.</li> <li>UDC consistently outperformed other methods, particularly in large-scale settings where scalability is critical.</li> </ul> <hr/> <h3 id="conclusion">Conclusion</h3> <p><strong>Summary</strong></p> <ul> <li>UDC, with its novel DCR training mechanism, successfully addresses the limitations of existing neural divide-and-conquer methods for large-scale CO problems.</li> <li>The unified training scheme ensures that both dividing and conquering stages work in synergy, thereby achieving better overall optimization.</li> </ul> <p><strong>Future Work</strong></p> <ul> <li>Further improvements can be made by designing better loss functions for training.</li> <li>Extending UDC’s applicability to other complex CO problems not covered in the current study is another promising direction for future research.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="Divide-and-Conquer,"/><category term="Optimization"/><summary type="html"><![CDATA[A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems]]></summary></entry><entry><title type="html">a post with tabs2</title><link href="https://optreal.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs2"/><published>2024-05-02T00:32:13+00:00</published><updated>2024-05-02T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="6a93a1e7-4289-4f2b-9865-d9ecbd5ba81c" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="6a93a1e7-4289-4f2b-9865-d9ecbd5ba81c" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="befb9869-eef3-4ae8-be8e-43b726827836" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="befb9869-eef3-4ae8-be8e-43b726827836" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="57c2e46b-24ec-4063-a9dd-ffeccf7c39a1" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="57c2e46b-24ec-4063-a9dd-ffeccf7c39a1" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://optreal.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="dc5c6e9c-2db6-4ca8-b307-91e015ea18a4" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="dc5c6e9c-2db6-4ca8-b307-91e015ea18a4" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="1003b2e0-103b-4ee0-8cd5-6457aca8b020" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="1003b2e0-103b-4ee0-8cd5-6457aca8b020" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="55918335-44e5-42b4-911b-a00117d3bed4" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="55918335-44e5-42b4-911b-a00117d3bed4" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://optreal.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://optreal.github.io/blog/2024/typograms</id><content type="html" xml:base="https://optreal.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://optreal.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://optreal.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://optreal.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://optreal.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://optreal.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://optreal.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://optreal.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://optreal.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://optreal.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></pre></td></tr></tbody></table></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://optreal.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://optreal.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://optreal.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>