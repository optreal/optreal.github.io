<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://optreal.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://optreal.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-26T04:52:53+00:00</updated><id>https://optreal.github.io/feed.xml</id><title type="html">Optreal</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Quantum Virtual Link Generation via Reinforcement Learning</title><link href="https://optreal.github.io/blog/2024/quantum_vl/" rel="alternate" type="text/html" title="Quantum Virtual Link Generation via Reinforcement Learning"/><published>2024-12-22T00:00:00+00:00</published><updated>2024-12-22T00:00:00+00:00</updated><id>https://optreal.github.io/blog/2024/quantum_vl</id><content type="html" xml:base="https://optreal.github.io/blog/2024/quantum_vl/"><![CDATA[<h2 id="abstract">Abstract</h2> <ul> <li>Quantum networks leverage quantum entanglement as a fundamental building block.</li> <li>When two qubits are entangled, their states exhibit non-classical correlations, enabling novel applications such as quantum key distribution and distributed quantum computing, which are not possible with classical communication.</li> <li>However, <u>quantum entanglement is a probabilistic process heavily dependent on the characteristics of the involved devices</u>, such as optical fibers, lasers, and quantum memories.</li> <li>Managing this process to maintain entanglement with high quality for as long as possible is a <strong>stochastic control problem</strong>.</li> <li>This process can be modeled as a MDP and solved using the RL framework.</li> <li>In this work, we employ RL to develop an <strong>entanglement management policy</strong> that surpasses the current State-of-the-Art policies, particularly in scenarios where precise models of the quantum devices are unavailable.</li> <li>Reference: <a class="citation" href="#a10207249">(Aparicio-Pardo et al., 2023)</a></li> </ul> <hr/> <h2 id="introduction">Introduction</h2> <h3 id="1-양자-인터넷의-등장">1. 양자 인터넷의 등장</h3> <ul> <li>최근 <strong>양자 물리학 원리(quantum physics principles)</strong>가 컴퓨터 네트워크에 적용되며 연구와 산업 분야에서 주목받고 있음</li> <li><strong>IETF(Internet Engineering Task Force)</strong>가 제안한 <strong>양자 인터넷(Quantum Internet)</strong>의 표준화 시도가 이를 증명 <a class="citation" href="#rfc9340">(Kozlowski et al., 2023)</a>, <a class="citation" href="#rfc9583">(Wang et al., 2024)</a></li> <li><strong>양자 얽힘(quantum entanglement)</strong>은 양자 통신(Quantum Communication)을 위한 기본 자원 <ul> <li>이를 통해 <strong>양자 암호 키 분배(quantum key distribution)</strong>와 <strong>분산 양자 컴퓨팅(distributed quantum computing)</strong>과 같은 응용 실현 가능</li> </ul> </li> </ul> <h3 id="2-양자-얽힘의-특성과-문제">2. 양자 얽힘의 특성과 문제</h3> <ul> <li>양자 얽힘은 <strong>확률적 과정(probabilistic process)</strong>으로, 관련 통신 장치(광섬유(optical fiber), 레이저(laser), 양자 메모리(quantum memory) 등)의 특성에 크게 의존</li> <li>얽힘 관리는 <strong>확률 제어 문제(stochastic control problem)</strong>로, 마르코프 결정 과정(Markov Decision Process, MDP)**으로 공식화 가능</li> <li>본 연구에서는 두 원격 통신 노드(remote communication nodes) 간의 얽힘을 설정할 때 DRL의 적용 가능성 조사</li> </ul> <h3 id="3-양자-비트qubit와-얽힘entanglement">3. <strong>양자 비트(Qubit)와 얽힘(Entanglement)</strong></h3> <ul> <li><strong>양자 비트(Qubit)</strong>는 고전 비트(classical bit)의 양자적 대응물 <ul> <li>고전 비트는 “0” 또는 “1”의 상태만 가지지만, 양자 비트는 두 상태의 <strong>중첩(superposition)</strong> 상태를 가짐</li> <li>측정 후 확률에 따라 “0” 또는 “1” 상태로 결정됨</li> </ul> </li> <li><strong>얽힘(Entanglement)</strong>: <ul> <li>두 양자 비트가 얽히면 각 상태를 독립적으로 설명할 수 없음</li> <li>한 쪽 비트 상태가 변하면, 물리적 거리에 관계없이 다른 비트의 상태도 함께 변화</li> <li>얽힘은 양자 암호와 분산 양자 컴퓨팅 같은 비고전적(non-classical) 응용의 핵심 요소</li> </ul> </li> </ul> <h3 id="4-양자-네트워크quantum-network">4. <strong>양자 네트워크(Quantum Network)</strong></h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/2024-12-22-quantum_vl/fig1-480.webp 480w,/assets/img/posts/2024-12-22-quantum_vl/fig1-800.webp 800w,/assets/img/posts/2024-12-22-quantum_vl/fig1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/2024-12-22-quantum_vl/fig1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>양자 네트워크는 얽힘 상태를 분배하고 <strong>양자 비트(Qubit)</strong>를 교환할 수 있는 노드(node)들로 구성. <ul> <li>노드들은 <strong>광섬유(optical fiber)</strong> 또는 <strong>위성 레이저 링크(satellite laser link)</strong>로 연결.</li> </ul> </li> <li>얽힘 상태 설정: <ul> <li>두 인접 노드에 위치한 양자 비트 간 얽힘은 <strong>기본 링크(elementary link)</strong>를 구성.</li> <li>두 노드 간 얽힘 성공 확률(\(P_e\))은 거리 증가에 따라 지수적으로 감소 <ul> <li>Short-distance entanglements (like A-B, in Fig. 1) are more likely to succeed than long-distance entanglements (like A-C, in Fig. 1)</li> </ul> </li> </ul> </li> <li><strong>가상 링크(Virtual Link)</strong> 생성: <ul> <li><strong><code class="language-plaintext highlighter-rouge">얽힘 교환(Entanglement Swapping)</code></strong>을 통해 두 개의 기본 링크를 결합 <ul> <li>예) 기본 링크 A-B와 B-C를 소비하여 A-C라는 장거리 가상 링크 생성</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">얽힘 교환</code>을 수행하는 중간 노드는 <strong>양자 리피터(Quantum Repeater)</strong></li> <li>양자 리피터는 기본 링크들을 <strong>양자 메모리(Quantum Memory)</strong>에 저장 후 사용 <ul> <li>예) B는 A-B와 B-C의 기본 링크를 양자 메모리에 저장 후 사용</li> </ul> </li> </ul> </li> </ul> <h3 id="5-양자-메모리-수명quantum-memory-lifetimes">5. <strong>양자 메모리 수명(Quantum Memory Lifetimes)</strong></h3> <ul> <li>양자 메모리에 저장된 얽힘 상태가 원래 상태를 유지할 확률(<strong>메모리 효율(memory efficiency), \(\eta_m\)</strong>)은 시간이 지남에 따라 감소 <ul> <li>이 과정은 <strong>데코히어런스(Decoherence)</strong>로 알려짐.</li> <li><code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률(<strong>\(P_s\)</strong>)은 가장 오래된 양자 메모리의 메모리 효율 \(\eta_m\)에 의존</li> </ul> </li> </ul> <h3 id="6-본-연구의-기여">6. 본 연구의 기여</h3> <ul> <li>양자 가상 링크 생성 과정을 <strong>고전적 MDP(Classical MDP)</strong>로 모델링하고, DRL 알고리즘을 사용하여 최적의 생성 정책(policy)을 도출</li> <li>본 연구는 기본 링크의 <strong>나이(age)</strong>를 추적하는 새로운 방법을 제안: <ul> <li>기존 연구에서는 링크 생성 성공 시점의 타임스탬프, 즉 링크의 나이를 고려하지 않음</li> </ul> </li> </ul> <table class="mbtablestyle table table-striped"> <tbody> <tr> <td><strong>심볼</strong></td> <td><strong>설명</strong></td> <td><strong>비고</strong></td> </tr> <tr> <td>\(P_e\)</td> <td>두 노드 간 얽힘 성공 확률</td> <td> </td> </tr> <tr> <td>\(\eta_m\)</td> <td>양자 메모리 효율</td> <td>양자 메모리에 저장된 얽힘 상태가 원래 상태를 유지할 확률 (저장 시간에 따라 감소, Mims 모델 따름 <a class="citation" href="#Ortu2022a">(Ortu et al., 2022)</a>)</td> </tr> <tr> <td>\(P_s\)</td> <td><code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률</td> <td>가장 오래된 양자 메모리의 메모리 효율, 즉, \(\eta_m\)에 의존</td> </tr> <tr> <td>\(t_c\)</td> <td>컷오프 시간</td> <td> </td> </tr> </tbody> </table> <hr/> <h2 id="related-works">Related Works</h2> <h3 id="1-quantum-decision-processqdp">1. Quantum Decision Process(QDP)</h3> <ul> <li>Quantum Decision Process(QDP)는 MDP의 양자적 일반화로, Khatri의 박사 논문<a class="citation" href="#10.5555/AAI29111215">(Khatri, 2021)</a>에서 제안됨.</li> <li>양자 컴퓨터의 사용을 전제로 하는 QDP의 주요 구성 요소 -양자 상태(Quantum State) - QDP에서는 상태를 <strong>양자 상태(Quantum State)</strong>로 표현 - 양자 상태는 상태 벡터로 나타나며, 중첩(Superposition)과 얽힘(Entanglement)을 포함할 수 있음 <ul> <li>양자 행동(Quantum Action) <ul> <li>QDP의 행동은 고전적 액션이 아닌 <strong>양자 연산자(Quantum Operator)</strong>로 표현됨</li> <li>이는 유니터리 연산이나 측정과 같은 양자역학적 연산으로 구현되며, 상태에 작용하여 새로운 상태를 생성함</li> </ul> </li> <li>양자 상태 전이 <ul> <li>전이 확률이 고전적 확률 분포 대신 양자 연산에 의해 결정됨</li> <li>양자 연산은 상태를 변환하면서 고전적 시스템과 달리 비선형적이고 중첩된 결과를 생성할 수 있음</li> </ul> </li> <li>보상 함수(Reward Function) <ul> <li>QDP의 보상 함수는 양자 상태를 기준으로 정의되며, 특정 양자 상태 또는 결과를 얻는 것에 대한 가치(value)를 표현함</li> <li>보상 함수는 상태와 행동의 조합에 따라 달라질 수 있음</li> </ul> </li> </ul> </li> </ul> <h3 id="2-이-논문의-접근-방식">2. 이 논문의 접근 방식</h3> <ul> <li>기존 QDP 모델과는 달리, 이 논문은 측정된 물리적 속성으로 기술된 상태와 거시적 수준의 액션으로 구성된 <strong>클래식 MDP</strong>로 모델링함.</li> <li>Khatri의 아이디어 중 현재 기술 수준에서 활용 가능한 것들을 도입, 양자 컴퓨터 개발을 기다릴 필요 없이 구현 가능성을 제시함.</li> </ul> <h3 id="3-논문-모델링-대상">3. 논문 모델링 대상</h3> <ul> <li>논문의 대상은 Khatri 논문의 부록 D에서 제시된 <strong><code class="language-plaintext highlighter-rouge">얽힘 교환</code>(entanglement swapping)을 이용한 가상 링크 생성</strong></li> <li>가상 링크 생성은 다음 두 가지 맥락에서 연구됨: <ul> <li><strong>양자 중계기(Quantum Repeaters) 체인</strong>에서의 장거리 얽힘 생성</li> <li><strong>양자 얽힘 라우팅(Quantum Entanglement Routing)</strong>에서의 Mesh 네트워크 기반 얽힘 생성</li> </ul> </li> </ul> <h3 id="4-기존-연구와의-차이점">4. 기존 연구와의 차이점</h3> <ul> <li>기존 연구는 링크 생성의 <strong>히스토리(타임스탬프)</strong>를 무시</li> <li>즉, 가상 링크 생성 시 무한 메모리 컷오프 시간 정책(infinity memory cutoff-time policy)을 따름 <ul> <li>초기 링크가 성공적으로 얽힌 이후 다음 링크가 성공적으로 얽힐 때까지 초기 링크는 원래 상태를 지속적으로 유지할 확률을 100% 로 설정</li> <li>오래된 링크의 더 큰 <code class="language-plaintext highlighter-rouge">디코히어런스(decoherence)</code>가 <code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률(\(P_s\))에 미치는 영향을 고려하지 않음</li> </ul> </li> </ul> <h3 id="5-이-논문의-개선점">5. 이 논문의 개선점</h3> <ul> <li>기존 접근법의 단점을 보완하여, 히스토리와 <code class="language-plaintext highlighter-rouge">디코히어런스</code> 영향을 포함한 MDP 모델링을 제안.</li> </ul> <hr/> <h2 id="reinforcement-learning-for-virtual-link-generation">Reinforcement Learning for Virtual Link Generation</h2> <h3 id="1-문제-정의-가상-링크-생성-문제">1. 문제 정의: <code class="language-plaintext highlighter-rouge">가상 링크 생성 문제</code></h3> <ul> <li><code class="language-plaintext highlighter-rouge">얽힘 교환</code>을 통해 두 개의 기본 링크로부터 가상 링크를 생성할 때 <strong><u>시간당 성공적인 `얽힘 교환` 횟수(가상 링크 생성률)를 최대화</u></strong>하는 문제</li> <li><code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률(<strong>\(P_s\)</strong>): <ul> <li>두 개의 기본 링크가 성공적으로 생성되어야 <code class="language-plaintext highlighter-rouge">얽힘 교환</code> 시도 가능</li> <li>처음 생성된 기본 링크가 오래될수록 성공 확률 감소</li> </ul> </li> <li><strong>컷오프 시간(</strong>\(t_c\)<strong>)</strong> <ul> <li><u>얽힘 상태를 유지하다가 폐기하는 시점을 결정하는 시간 임계값</u></li> <li>얽힘 품질 관리 <ul> <li>얽힘 상태는 시간이 지남에 따라 <code class="language-plaintext highlighter-rouge">디코히어런스</code> 현상으로 인해 점차 품질이 저하됨</li> <li>품질이 낮아지면 <code class="language-plaintext highlighter-rouge">얽힘 교환</code>의 성공 확률이 감소하므로, 특정 시간 이후 품질 저하된 얽힘 상태를 폐기하는 것이 유리함</li> </ul> </li> <li>리소스 최적화 <ul> <li>얽힘 상태를 오래 유지하면 성공 확률은 감소하지만, 새로 생성하지 않으므로 리소스를 절약할 수 있음</li> <li>반대로, 얽힘 상태를 폐기하고 새로 생성하면 높은 성공 확률을 얻을 수 있지만, 생성 과정에서 비용과 시간이 소모되고 <code class="language-plaintext highlighter-rouge">얽힘 교환</code> 시도를 지연시킴</li> </ul> </li> <li>얽힘 폐기와 재생성을 통해 <code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률(<strong>\(P_s\)</strong>)을 높일 수 있음</li> </ul> </li> <li>컷오프 시간 설정의 중요성</li> </ul> <table class="mbtablestyle table table-striped"> <tbody> <tr> <td><strong>짧은 컷오프 시간</strong></td> <td><strong>긴 컷오프 시간</strong></td> </tr> <tr> <td>얽힘 상태를 빠르게 폐기하고 새로 생성함</td> <td>얽힘 상태를 오래 유지하며 새로운 생성 빈도를 줄임</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률은 높아질 수 있지만, 새로운 링크 생성의 반복으로 인해 전체 과정이 지연될 가능성이 높아짐</td> <td>리소스를 절약하며 빠르게 교환 시도를 진행할 수 있지만, <code class="language-plaintext highlighter-rouge">얽힘 교환</code>의 성공 확률은 낮아질 수 있음</td> </tr> <tr> <td>리소스 소모 증가</td> <td><code class="language-plaintext highlighter-rouge">디코히어런스</code> 영향이 크다면 교환 실패 가능성이 높아짐</td> </tr> </tbody> </table> <ul> <li>컷오프 시간 결정의 어려움 <ul> <li>얽힘 생성 성공 확률(\(P_e\))와 <code class="language-plaintext highlighter-rouge">얽힘 교환</code> 성공 확률(\(P_s\))은 다양한 환경적 요인(예: 광섬유 길이, 양자 메모리 특성)에 따라 변화</li> <li>최적의 컷오프 시간을 설정하려면 다음을 고려해야 함 <ul> <li>얽힘 상태의 품질 변화 속도(<code class="language-plaintext highlighter-rouge">디코히어런스</code> 영향)</li> <li>새로운 얽힘 생성의 성공 확률 및 소요 시간</li> <li>전체 가상 링크 생성률을 극대화하는 시간-성능 균형</li> </ul> </li> </ul> </li> </ul> <h3 id="2-양자-얽힘-관리-문제에-대한-mdp-정의">2. 양자 얽힘 관리 문제에 대한 MDP 정의</h3> <ul> <li><strong>타임 스텝(time step) \(t\)</strong> : <ul> <li>제어 에이전트는 현재 상태 \(s_t\)를 관찰한 후 특정 행동 \(a_t\)를 적용</li> <li>이 행동의 실행은 상태 전이 확률 \(p(s_t, a_t, s_{t+1})\)에 의하여 새로운 상태 \(s_{t+1}\)로의 전환을 유발</li> <li>에이전트는 상태-행동 쌍 \((s_t, a_t)\)의 평가에 따라 보상 \(r_{t+1}\)을 받음</li> <li>에이전트는 새로운 상태 \(s_{t+1}\)를 관찰하고 이 과정을 반복</li> </ul> </li> <li><strong>MDP의 경로(trajectory):</strong> <ul> <li>초기 상태 \(s_0\)에서 시작하여 다음과 같은 경로를 생성: \(s_0, a_0, r_1, s_1, a_1, r_2, s_2, a_2, r_3, \dots\)</li> <li>이 경로는 에이전트 정책(policy) \(\pi(s, a)\)에 따라 생성</li> </ul> </li> <li><strong>시스템 상태:</strong> <ul> <li>두 기본 링크(elementary links)와 가상 링크(virtual link)의 상태(행동)를 연결(concatenate)하여 구성</li> <li>각 링크의 상태는 벡터 \(s = [x, m]\)로 표현: <ul> <li>\(x\): 얽힘(entanglement) 상태 <ul> <li>\(x = 1\): 얽힘이 활성 상태</li> <li>\(x = 0\): 얽힘이 비활성 상태</li> </ul> </li> <li>\(m\): 얽힘의 나이(age) <ul> <li>얽힘이 비활성 상태(즉, \(x = 0\))인 경우 \(m = -1\)</li> </ul> </li> </ul> </li> </ul> </li> <li><strong>각 링크별 가능한 행동:</strong> <ul> <li>각 기본 또는 가상 링크에 대해 다음 두 가지 행동 중 하나 선택: <ol> <li><strong>재설정(reset):</strong> <ul> <li>링크 생성 재시도</li> <li>확률 \(P_e\) 및 \(P_s\)에 따라 확률적 전환 유발</li> <li>해당 링크 상태 \(s\)에 대해 <ul> <li>\(x\)가 1 또는 0으로 변경</li> <li>\(x=1\)이라면 \(m\)은 0으로 변경</li> </ul> </li> </ul> </li> <li><strong>대기(wait):</strong> <ul> <li>링크 생성이 재시도되지 않으며, 현재 링크 상태는 그대로 유지</li> <li>해당 링크 상태 \(s\)에 대해 <ul> <li>\(x\)는 변환없고</li> <li>\(x=1\)이라면 \(m\) 증가 유발</li> </ul> </li> </ul> </li> </ol> </li> <li>가상 링크에 대한 <strong>재설정(reset)</strong> <ul> <li>두 기본 링크에 대하여 <code class="language-plaintext highlighter-rouge">얽힘 교환</code>을 통해 하나의 가상 링크 생성</li> </ul> </li> <li>행동 공간 크기 \(2^3 = 8\)</li> </ul> </li> <li><strong>보상(reward):</strong> <ul> <li><code class="language-plaintext highlighter-rouge">얽힘 교환</code>이 성공하면 보상 값은 1</li> <li>그렇지 않으면 보상 값은 0</li> </ul> </li> </ul> <h3 id="3-양자-환경-모델에-대한-가정">3. 양자 환경 모델에 대한 가정</h3> <ul> <li>얽힘 생성 및 저장 방식 <ul> <li>얽힘은 <code class="language-plaintext highlighter-rouge">신호(herald)</code> 방식으로 생성됨 <ul> <li>얽힘 상태가 성공적으로 생성되었을 때, 해당 성공 여부를 외부에서 확인할 수 있도록 신호(herald)를 제공하는 얽힘 생성 기술을 지칭함</li> <li>양자 얽힘 생성 과정에서 성공 여부를 실시간으로 확인할 수 있음</li> </ul> </li> <li>얽힘 생성 시각과 컷오프 시간 \(t_c\)와의 연관 <ul> <li><code class="language-plaintext highlighter-rouge">신호(herald)</code> 방식에 의해 컷오프 시간 \(t_c\)를 정밀하게 측정하여 얽힘 품질 관리에 활용 <ul> <li>얽힘 생성 시점부터 시간이 경과함에 따라 얽힘 상태는 <code class="language-plaintext highlighter-rouge">디코히어런스(decoherence)</code>로 인해 품질이 저하되므로, 컷오프 시간 \(t_c\)이 네트워크 효율 관리에 중요함</li> </ul> </li> </ul> </li> <li>얽힘 상태 저장 <ul> <li>생성된 얽힘은 <strong>양자 메모리</strong>에 저장되며, 가상 링크 생성을 위해 얽힘 교환에 사용됨</li> </ul> </li> <li>얽힘 생성 방식으로 <strong>DLCZ 기반 프로토콜</strong> 사용 <ul> <li>광자 방출과 검출을 통해 얽힘 생성 성공 여부를 확인</li> <li>성공 여부를 기반으로 얽힘 상태를 메모리에 저장하고 컷오프 시간 \(t_c\) 관리</li> </ul> </li> </ul> </li> <li>시간 슬롯 모델 <ul> <li>전체 시간을 슬롯 단위로 나눔 <ul> <li>슬롯 길이: \(\frac{L_0}{v}\)</li> <li>\(L_0\): 기본 링크(광섬유)의 길이</li> <li>\(v\): 광섬유에서 빛의 전파 속도</li> </ul> </li> <li>슬롯 길이는 새로운 상태를 관찰하고 링크 생성을 재시도하는데 요구되는 시간보다는 길어야 함</li> </ul> </li> <li>기본 링크 얽힘 성공 확률 \(P_e\) <ul> <li>광섬유 거리 \(L_0\)에 따라 지수적으로 감소 <ul> <li><a class="citation" href="#sangouard2009">(Sangouard et al., 2009)</a>에서 제시된 결과에 기반함</li> </ul> </li> </ul> </li> <li>양자 메모리 효율 \(\eta_m\) <ul> <li>저장 시간에 따라 감소 <ul> <li><a class="citation" href="#Ortu2022a">(Ortu et al., 2022)</a>에서 설명된 Mims 모델에 따름</li> </ul> </li> <li>이는 얽힘 교환 성공 확률 \(P_s\)에 주요 영향을 미침</li> </ul> </li> </ul> <h3 id="4-강화학습-기반-문제-해결-접근-방법">4. 강화학습 기반 문제 해결 접근 방법</h3> <ul> <li>확률 모델의 부재 <ul> <li>기본 링크 생성 확률 \(P_e\)와 메모리 효율 \(\eta_m\) (따라서, 얽힘 교환 성공 확률 \(P_s\))에 대한 정확한 모델을 알 수 없음</li> <li>따라서, 당연히 상태 전이 확률 \(p(s_t, a_t, s_{t+1})\)도 알 수 없음</li> </ul> </li> <li>깊은 강화학습(DRL)의 적용 <ul> <li>가상 링크 생성률을 극대화하는 정책을 찾기 위해 DRL 적용</li> <li>이 과정에서 \(\pi\)를 따르는 \(Q\)-value 함수인 \(Q^\pi(s, a)\)를 정의하여 활용</li> </ul> </li> <li>\(Q\)-value 함수 정의 <ul> <li>\(Q^\pi(s, a)\): 주어진 상태-행동 쌍 \((s, a)\)에 대해 정책 \(\pi\)를 따랐을 때 할인된 누적 보상 기대값 (expected discounted return)</li> <li>할인된 누적 보상은 궤적(trajectory)에서 미래 보상의 합으로 정의됨: \(\sum_{k=0}^\infty \gamma^k r_{t+k+1}, \quad \gamma \in [0, 1]\)</li> <li>에이전트는 \(Q\)-value 함수를 극대화하는 최적 정책 \(\pi^*\)를 탐색</li> </ul> </li> <li>정책의 구성 <ul> <li>본 문제에서 정책은 가장 적절한 컷오프 시간 \(t_c\)를 결정하는 것</li> </ul> </li> <li>DQN 알고리즘을 활용한 학습 <ul> <li>본 연구에서는 <strong>Deep Q-Network(DQN)</strong> 알고리즘을 기반으로 <code class="language-plaintext highlighter-rouge">가상 링크 생성 문제</code>에 적합하도록 학습 루틴을 구성</li> <li>학습 루틴은 기존의 DQN 방식을 따르면서도 본 연구 문제에 맞게 조정됨</li> </ul> </li> </ul> <h2 id="실험-결과">실험 결과</h2> <h3 id="1-실험-세팅">1. 실험 세팅</h3> <ul> <li>기본 설정 <ul> <li>광섬유 길이 \(L_0 = 100 \, \mathrm{km}\), 빛의 속도(light speed) \(200,000 \, \mathrm{km/s}\) <ul> <li>타임 슬롯 길이 (duration of a time step): \(0.5 \, \mathrm{ms}\)</li> </ul> </li> <li>광섬유 손실은 \(0.2 \, \mathrm{dB/km}\) <ul> <li>광섬유를 통해 빛이 \(1 \, \mathrm{km}\)를 갈 때, 빛의 세기가 조금 줄어드는 정도를 $0.2$로 가정</li> <li>이 줄어드는 정도는 빛 파장이 \(1,550 \, \mathrm{nm}\) 때 가능</li> </ul> </li> <li>Mims 방정식을 사용하여 손실 모델링 수행</li> <li>zero-time efficiency 가정 <ul> <li>얽힘 생성, 전송, 또는 교환 과정에서 추가적인 시간 지연(예: 신호 전파 시간, 연산 시간 등)이 없다고 가정</li> <li>양자 메모리에서 Swap을 수행할 때, 시간이 소모되지 않고 즉각적으로 이루어진다고 간주</li> </ul> </li> </ul> </li> <li>세 계의 계층으로 이루어진 \(Q\)-value 함수 구현 <ul> <li>두 개의 Dense Layer에는 각각 32개의 뉴런 존재</li> <li>각 층은 \(\tanh\) 활성화 함수를 사용</li> <li>출력층에는 활성화 함수가 없으며, 액션 수와 동일한 뉴런 수를 가짐 <ul> <li>액션 수는 8 (두 개의 기본 링크와 하나의 가상 링크를 고려)</li> </ul> </li> </ul> </li> <li>학습 알고리즘 <ul> <li>OpenAI Baselines 라이브러리에서 제공하는 DQN 알고리즘 사용</li> <li>DRL 알고리즘으로 신경망 학습</li> </ul> </li> <li>보상 평가 <ul> <li>에피소드 보상은 학습 에피소드 동안 발생한 모든 단계의 보상 \(r\)의 합으로 계산</li> <li>에피소드는 10,000 스텝으로 구성</li> <li>평균 에피소드 보상이 학습 시간에 따라 증가하며, 600 에피소드 이후 안정화됨</li> </ul> </li> </ul> <h3 id="2-실험-결과">2. 실험 결과</h3> <ul> <li>Benchmark 1: <strong>Inf-cutoff-time policy</strong> <ul> <li>컷오프 시간 무한대 설정</li> <li>즉, 첫 번째 기본 링크가 성공적으로 생성되면, 두 번째 기본 링크가 성공할 때까지 첫 번째 링크를 계속 유지 <ul> <li><code class="language-plaintext highlighter-rouge">디코히어런스(decoherence)</code>로 인해 첫 번째 링크의 상태가 저하되더라도 폐기하지 않고 그대로 사용</li> </ul> </li> <li>이 방법은 최적 정책 성능의 하한선으로 활용됨</li> <li>장점 <ul> <li>첫 번째 링크를 폐기하지 않고 유지하므로, 재생성에 따른 추가 비용과 시간을 절약</li> </ul> </li> <li>단점 <ul> <li>첫 번째 링크가 오래 유지되면서 품질이 저하될 가능성이 큼 <ul> <li>저하된 품질로 인해 얽힘 교환의 성공 확률이 크게 낮아질 수 있음</li> </ul> </li> </ul> </li> </ul> </li> <li>Benchmark 2: <strong>Opt-cutoff-time policy</strong> <ul> <li>문제의 모든 가능한 컷오프 시간을 시도하여 가장 좋은 결과를 내는 값을 선택</li> <li>즉, 가장 오래된 기본 링크의 컷오프 시간을 여러 값으로 설정하여 모두 시뮬레이션 <ul> <li>각 시뮬레이션 결과를 비교하여 가장 높은 성능(예: 최대 얽힘 교환 성공률)을 내는 컷오프 시간을 선택</li> </ul> </li> <li>이 방법은 최적 정책 성능의 상한선으로 활용됨</li> </ul> </li> <li>실험 결과 설명</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/2024-12-22-quantum_vl/fig2-480.webp 480w,/assets/img/posts/2024-12-22-quantum_vl/fig2-800.webp 800w,/assets/img/posts/2024-12-22-quantum_vl/fig2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/2024-12-22-quantum_vl/fig2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>정책 테스트 방법 <ul> <li>MDP 프로세스를 1,000번 시뮬레이션하여 정책을 테스트</li> <li>하나의 에피소드는 10,000 스텝으로 구성됨.</li> </ul> </li> <li>성능 비교 결과 <ul> <li>DRL 에이전트는 Inf-cutoff-time 정책보다 명확히 더 좋은 성능을 보임</li> <li>DRL 에이전트의 성능은 opt-cutoff-time 정책에 매우 근접함.</li> </ul> </li> <li>컷오프 시간 결과 <ul> <li>DRL 정책에서 발견된 최적 컷오프 시간: 146.0 스텝</li> <li>opt-cutoff-time 정책에서 발견된 최적 컷오프 시간: 108 스텝</li> </ul> </li> <li>의미 <ul> <li>DRL 정책은 최적 정책(opt-cutoff-time)에 근접하면서도 이 정책에서 사용하고 있는 Brute-force 방법보다 효율적으로 작동함</li> <li>Inf-cutoff-time 정책보다 더 나은 컷오프 시간을 찾음으로써 성능 향상을 입증</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="Quantum"/><category term="Networks"/><category term="Quantum,"/><category term="Reinforcement"/><category term="Learning"/><summary type="html"><![CDATA[Quantum Virtual Link Generation via Reinforcement Learning]]></summary></entry><entry><title type="html">UDC</title><link href="https://optreal.github.io/blog/2024/tabs-ttt/" rel="alternate" type="text/html" title="UDC"/><published>2024-11-26T00:32:13+00:00</published><updated>2024-11-26T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs-ttt</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs-ttt/"><![CDATA[<h3 id="abstract">Abstract</h3> <p><strong>Single-Stage Neural Combinatorial Optimization Solvers</strong></p> <ul> <li>Exhibit significant performance degradation when applied to large-scale combinatorial optimization (CO) problems.</li> </ul> <p><strong>Two-Stage Neural Methods</strong></p> <ul> <li>Inspired by Divide-and-Conquer strategies.</li> <li>Efficient in addressing large-scale CO problems but rely heavily on problem-specific heuristics in either the dividing or conquering phase, limiting general applicability.</li> <li>Typically, employ separate training schemes, overlooking interdependencies between the two phases, often leading to convergence to suboptimal solutions.</li> </ul> <p>Unified Neural Divide-and-Conquer Framework (UDC)</p> <ul> <li>Introduces the Divide-Conquer-Reunion (DCR) training method to address issues arising from suboptimal dividing policies.</li> <li>Utilizes a lightweight Graph Neural Network (GNN) to decompose large-scale CO instances.</li> <li>Employs a constructive solver to conquer the divided sub-problems effectively. Demonstrates extensive applicability to diverse CO problems.</li> <li>Achieves superior performance across 10 representative large-scale CO problems.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_1-480.webp 480w,/assets/img/table_1-800.webp 800w,/assets/img/table_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="introduction">Introduction</h3> <p><strong>Combinatorial Optimization (CO) Applications</strong></p> <ul> <li>Route planning</li> <li>Circuit design</li> <li>Biology</li> </ul> <p><strong>Reinforcement Learning (RL)-based Constructive Neural Combinatorial Optimization (NCO) Methods</strong></p> <ul> <li>Generate near-optimal solutions for small-scale instances (e.g., TSP instances with up to 200 nodes) without requiring expert knowledge.</li> <li>Construct solutions in an end-to-end manner, node-by-node.</li> <li>Limited capability when applied to large-scale instances.</li> </ul> <p><strong>Categories of NCO Methods</strong></p> <ol> <li><strong>Modified Single-Stage Solvers</strong> <ul> <li>Methods like BQ-NCO and LEHD develop sub-path construction using heavy decoders.</li> <li>Require supervised learning (SL), limiting applicability when high-quality labeled solutions are unavailable.</li> </ul> </li> <li><strong>Auxiliary Information for RL-Based Solvers</strong> <ul> <li>Methods like ELG, ICAM, and DAR use auxiliary information to guide solvers.</li> <li>Problem-specific auxiliary designs limit general applicability.</li> <li>Complexity issues arise, particularly with self-attention mechanisms (e.g., \(O(N^2)\) complexity).</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Inspired by traditional heuristic divide-and-conquer methods.</li> <li>Use a two-stage approach: dividing the instance and conquering sub-problems.</li> <li>Methods like TAM, H-TSP, and GLOP show improved efficiency in large-scale TSP and CVRP problems.</li> </ul> </li> </ol> <p><strong>Challenges in Large-Scale NCO</strong></p> <ul> <li>Heavy models requiring SL are limited by the availability of labeled solutions.</li> <li>Self-attention complexity \(O(N^2)\) hinders scalability.</li> <li>Problem-specific auxiliary information limits general applicability.</li> </ul> <h3 id="shortcomings-of-neural-divide-and-conquer-approaches">Shortcomings of Neural Divide-and-Conquer Approaches</h3> <p><strong>Limitations in Applicability and Solution Quality</strong></p> <ul> <li>Rely on problem-specific heuristics in either the dividing (e.g., GLOP, SO) or conquering (e.g., L2D, RBG) stages, which limits generalizability.</li> </ul> <p><strong>Issues with Separate Training Process</strong></p> <ul> <li>Dividing and conquering policies are trained separately, which fails to consider their interdependencies, often resulting in convergence to local optima.</li> </ul> <p><strong>Importance of Mitigating Sub-Optimal Dividing Impact</strong></p> <ul> <li>Addressing suboptimal dividing is crucial for achieving high-quality solutions.</li> </ul> <h3 id="proposed-approach">Proposed Approach</h3> <p><strong>Divide-Conquer-Reunion (DCR)</strong></p> <ul> <li>A novel RL-based training method designed to consider interdependencies between dividing and conquering stages.</li> </ul> <p><strong>Unified Neural Divide-and-Conquer Framework (UDC)</strong></p> <ul> <li>Incorporates DCR in a unified training scheme.</li> <li>Uses a lightweight GNN to efficiently decompose large-scale instances into manageable sub-problems.</li> <li>Constructive solvers then effectively solve these sub-problems.</li> </ul> <p><strong>Contributions</strong></p> <ul> <li>Propose DCR to mitigate the impact of suboptimal dividing policies.</li> <li>Achieve a unified training scheme in UDC, leading to improved performance.</li> <li>Demonstrate UDC’s applicability across various CO problems.</li> </ul> <hr/> <h3 id="preliminaries-neural-divide-and-conquer">Preliminaries: Neural Divide-and-Conquer</h3> <p><strong>CO Problem Definition</strong></p> <ul> <li>Involves $N$ decision variables.</li> <li>Objective: Minimize function \(f(x, \mathcal{G})\), where $G$ is the CO instance, and \(\Omega\) is the set of feasible solutions.</li> </ul> \[\text{minimize}_ f(x, \mathcal{G})\] <p><strong>Divide-and-Conquer in CO</strong></p> <ul> <li><strong>Traditional Methods</strong> <ul> <li>Use heuristic algorithms like large-neighborhood-search to divide and conquer.</li> <li>Dividing stage selects sub-problems, and conquering stage repairs sub-problems.</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Dividing policy \(\pi_d(\mathcal{G})\) decomposes instance $G$ into sub-problems.</li> <li>Conquering policy \(\pi_c\) solves each sub-problem, and the total solution is obtained by concatenating sub-solutions.</li> </ul> </li> </ul> <h3 id="constructive-neural-solver">Constructive Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Efficient for small-scale CO problems.</li> <li>Uses an attention-based encoder-decoder network to construct solutions.</li> </ul> <p><strong>Training Process</strong></p> <ul> <li>Modeled as a Markov Decision Process (MDP).</li> <li>Trained using Deep Reinforcement Learning (DRL) without expert experience.</li> </ul> <p><strong>Solution Generation</strong></p> <ul> <li>Constructs solutions step-by-step using a trained policy \(\pi\).</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = \prod_{t=1}^{\tau} p_{\theta}(x_t \mid x_{1:t-1}, \mathcal{G}, \Omega)\] <h3 id="heatmap-based-neural-solver">Heatmap-Based Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Uses lightweight GNNs for problem-solving, especially for large-scale CO problems like VRPs.</li> </ul> <p><strong>Limitations</strong></p> <ul> <li><strong>Non-Autoregressive Generation</strong>: Lacks partial solution order information, which can lead to poor solution quality.</li> <li><strong>Search Algorithm Dependence</strong>: Relies on search algorithms for high-quality solutions.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = p_{\theta}(\mathcal{H} \mid \mathcal{G}, \Omega) p(x_1) \prod_{t=2}^{\tau} \frac{\exp(\mathcal{H}_{x_{t-1}, x_t})}{\sum_{i=t}^{N} \exp(\mathcal{H}_{x_{t-1}, x_i})},\] <hr/> <h3 id="methodology-unified-divide-and-conquer-udc">Methodology: Unified Divide-and-Conquer (UDC)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_1-480.webp 480w,/assets/img/figure_1-800.webp 800w,/assets/img/figure_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="general-framework">General Framework</h4> <ul> <li><strong>Two Stages</strong>: Dividing and Conquering.</li> <li><strong>Dividing Stage</strong>: Generates initial solutions using an Anisotropic GNN (AGNN).</li> <li><strong>Conquering Stage</strong>: Decomposes the original instance into sub-problems and solves them using constructive neural solvers.</li> </ul> <p><strong>Solver Integration</strong></p> <ul> <li>Different solvers are used based on the type of CO problem.</li> <li><strong>AGNN</strong> for Maximum Independent Set (MIS).</li> <li><strong>POMO</strong> for Vehicle Routing Problem (VRP).</li> <li><strong>ICAM</strong> for 0-1 Knapsack Problem (KP).</li> </ul> <p><strong>Dividing Stage</strong></p> \[\pi_d(x_0|\mathcal{G}_D, \Omega, \phi) = \begin{cases} p(\mathcal{H}|\mathcal{G}_D, \Omega, \phi) p(x_{0,1}) \prod_{t=2}^\tau \frac{\exp(\mathcal{H}_{x_0, t-1, x_0, t})}{\sum_{i=t}^N \exp(\mathcal{H}_{x_0, t-1, x_0, i})}, &amp; \text{if } x_0 \in \Omega \\ 0, &amp; \text{otherwise} \end{cases}\] <ul> <li>original CO instance \(\mathcal{G}\)</li> <li>sparse graph \(\mathcal{G}_D = \{ \mathbb{V}, \mathbb{E} \}\)</li> <li>parameter $$\phi$ of Anisotropic Graph Neural Networks (AGNN)</li> <li>heatmap \(\mathcal{H}\) (e.g For \(N\)-node VRPs, the heatmap \(\mathcal{H} \in \mathbb{R}^{N×N}\) )</li> <li>initial solution \(x_0 = (x_{0,1},...,x_{0,\tau})\), \(\tau\) is length</li> </ul> <p><strong>Conquering Stage: Sub-problem Preparation</strong></p> <ul> <li>sub-problems \(\{ \mathcal{G}_1,..., \mathcal{G}_{\lfloor \frac{N}{n} \rfloor} \}\)</li> <li>\(\{ \Omega_1,..., \Omega_{\lfloor \frac{N}{n} \rfloor} \}\) constraints of sub-problems (e.g no self-loop in sub-TSPs)</li> </ul> <p><strong>Conquering Stage: Constructive Neural Conquering</strong></p> <p>\(\pi_c(s_k|\mathcal{G}_k, \Omega_k, \theta) = \begin{cases} \prod_{t=1}^n p(s_{k,t} | s_{k,1:t-1}, \mathcal{G}_k, \Omega_k, \theta), &amp; \text{if } s_k \in \Omega_k \\ 0, &amp; \text{otherwise} \end{cases}\)</p> <ul> <li>utilize constructive solvers with parameter $$\theta$ for most involved sub-CO problems.</li> <li>sub-solution \(s_{k} = (s_{k,1},...,s_{k,n})\), $k \in { 1,…, \lfloor \frac{N}{n} \rfloor}$$</li> <li>conquering policy \(\pi_c\)</li> <li>Replacement of original solution fragments in the final conquering stage: sub-solutions with improvements on the objective function replace the original solution fragment in \(x_0\)</li> <li>Formation of merged solution: the merged solution becomes \(x_1\)</li> <li>Repeated execution of conquering stage: conquering stage can be executed repeatedly on the new merged solution</li> <li>Gradual improvement in solution quality: the solution after \(r\) conquering stages is noted as \(x_r\)</li> </ul> <h3 id="training-method-divide-conquer-reunion-dcr">Training Method: Divide-Conquer-Reunion (DCR)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_2-480.webp 480w,/assets/img/figure_2-800.webp 800w,/assets/img/figure_2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Dividing and conquering stages modeled as MDPs.</li> <li>Separate training for conquering and dividing policies.</li> <li>Need for problem-specific datasets.</li> <li>Lack of collaboration in optimizing policies.</li> <li>Impact of sub-optimal sub-problem decomposition.</li> <li>Divide-Conquer-Reunion (DCR) process introduction.</li> <li>Additional Reunion step for better integration of sub-problems.</li> <li>Improved stability and convergence in training.</li> <li>Use of REINFORCE algorithm for unified training.</li> <li>Baseline calculation for both dividing and conquering policies.</li> </ul> <p>\(\nabla \mathcal{L}d(\mathcal{G}) = \frac{1}{\alpha} \sum_{i=1}^\alpha\) \(\left( f(x_2^i, \mathcal{G}) - \frac{1}{\alpha} \sum_{j=1}^\alpha f(x_2^j, \mathcal{G}) \right) \nabla \log \pi_d(x_2^i|\mathcal{G}_D, \Omega, \phi)\) \(\nabla \mathcal{L}{c1}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{1,i}, \mathcal{G}_{c}^0) - \frac{1}{\beta} \sum_{j=1}^\beta f{\prime}(s_{c}^{1,j}, \mathcal{G}_{c}^0) \right) \nabla \log \pi_c(s_{c}^{1,j}|\mathcal{G}_{c}^0, \Omega_{c}, \theta) \right)\) \(\nabla \mathcal{L}{c2}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{2,i}, \mathcal{G}_{c}^1) - \frac{1}{\beta} \sum_{j=1}^\beta f{\prime}(s_{c}^{2,j}, \mathcal{G}_{c}^1) \right) \nabla \log \pi_c(s_{c}^{2,j}|\mathcal{G}_{c}^1, \Omega_{c}, \theta) \right)\)</p> <ul> <li>\(\{ x_2^1, ..., x_{2}^{\alpha} \}\) represents the \(\alpha\) sampled solutions.</li> <li>there are \(\alpha \lfloor \frac{N}{n} \rfloor$ sub-problems\)\mathcal{G}^{0}<em>{c},c \in { 1, …, \lfloor \frac{N}{n} \rfloor, …, \alpha \lfloor \frac{N}{n} \rfloor}\(generated based on\){ x_0^1, …, x</em>{0}^{\alpha} }$$ in the first conquering stage</li> <li>\(\alpha \lfloor \frac{N}{n} \rfloor\) can be regarded as the batch size of sub-problems</li> <li>The \(\beta\) sampled sub-solutions for sub-problem \(\mathcal{G}_{c}^{0}, \mathcal{G}_{c}^{1},c \in \{1,..., \alpha \lfloor \frac{N}{n} \rfloor\}\) are noted as \(\{s_{c}^{1,i},...,s_{c}^{1,\beta}\},\{s_{c}^{2,i},...,s_{c}^{2,i}\}\).</li> </ul> <p><strong>Challenges and Proposed Solution</strong></p> <ul> <li>Existing methods fail to train dividing and conquering policies simultaneously, leading to unsolvable antagonisms.</li> <li><strong>Unified Training Requirement</strong>: DCR enables collaborative optimization of dividing and conquering policies by treating connections between sub-problems as new problems to reconquer.</li> </ul> <p><strong>Training Process with REINFORCE</strong></p> <ul> <li>Uses the REINFORCE algorithm to train both dividing and conquering policies, ensuring better reward estimation and improved convergence.</li> </ul> <h3 id="application-general-co-problems">Application: General CO Problems</h3> <p><strong>Conditions for Applicability</strong></p> <ol> <li><strong>Decomposable Objective Functions</strong>: The objective function must contain decomposable aggregate functions (i.e., no functions like Rank or Top-k).</li> <li><strong>Feasibility of Initial and Sub-Solutions</strong>: Ensured using feasibility masks.</li> <li><strong>Non-Uniqueness of Sub-Problem Solutions</strong>: Solutions for sub-problems should not be unique to ensure flexibility in merging sub-solutions.</li> </ol> <p><strong>Limitations</strong></p> <ul> <li>Complex CO problems may face issues where solutions cannot be guaranteed as legal through the process, limiting applicability.</li> <li>Problems such as TSPTW may have constraints that make ensuring legal initial and sub-solutions difficult.</li> </ul> <hr/> <h3 id="experiment">Experiment</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_2-480.webp 480w,/assets/img/table_2-800.webp 800w,/assets/img/table_2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_3-480.webp 480w,/assets/img/table_3-800.webp 800w,/assets/img/table_3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/table_4-480.webp 480w,/assets/img/table_4-800.webp 800w,/assets/img/table_4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/table_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/figure_3-480.webp 480w,/assets/img/figure_3-800.webp 800w,/assets/img/figure_3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/figure_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Overview</strong></p> <ul> <li>To verify the applicability and efficiency of UDC, experiments were conducted across 10 different CO problems, including TSP, CVRP, KP, MIS, and more.</li> <li>UDC was compared to both classical and neural solvers.</li> </ul> <p><strong>Performance Evaluation</strong></p> <ul> <li>UDC demonstrated superior performance in terms of solution quality and computational efficiency across large-scale CO instances, ranging from 500-node to 2,000-node problems.</li> </ul> <p><strong>Comparison to Baselines</strong></p> <ul> <li>Classical solvers like LKH and other neural methods (e.g., ELG, GLOP) were used as baselines.</li> <li>UDC consistently outperformed other methods, particularly in large-scale settings where scalability is critical.</li> </ul> <hr/> <h3 id="conclusion">Conclusion</h3> <p><strong>Summary</strong></p> <ul> <li>UDC, with its novel DCR training mechanism, successfully addresses the limitations of existing neural divide-and-conquer methods for large-scale CO problems.</li> <li>The unified training scheme ensures that both dividing and conquering stages work in synergy, thereby achieving better overall optimization.</li> </ul> <p><strong>Future Work</strong></p> <ul> <li>Further improvements can be made by designing better loss functions for training.</li> <li>Extending UDC’s applicability to other complex CO problems not covered in the current study is another promising direction for future research.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems</title><link href="https://optreal.github.io/blog/2024/udc/" rel="alternate" type="text/html" title="A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems"/><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://optreal.github.io/blog/2024/udc</id><content type="html" xml:base="https://optreal.github.io/blog/2024/udc/"><![CDATA[<h3 id="abstract">Abstract</h3> <p><strong>Single-Stage Neural Combinatorial Optimization Solvers</strong></p> <ul> <li>Exhibit significant performance degradation when applied to large-scale combinatorial optimization (CO) problems.</li> </ul> <p><strong>Two-Stage Neural Methods</strong></p> <ul> <li>Inspired by Divide-and-Conquer strategies.</li> <li>Efficient in addressing large-scale CO problems but rely heavily on problem-specific heuristics in either the dividing or conquering phase, limiting general applicability.</li> <li>Typically, employ separate training schemes, overlooking interdependencies between the two phases, often leading to convergence to suboptimal solutions.</li> </ul> <p>Unified Neural Divide-and-Conquer Framework (UDC)</p> <ul> <li>Introduces the Divide-Conquer-Reunion (DCR) training method to address issues arising from suboptimal dividing policies.</li> <li>Utilizes a lightweight Graph Neural Network (GNN) to decompose large-scale CO instances.</li> <li>Employs a constructive solver to conquer the divided sub-problems effectively. Demonstrates extensive applicability to diverse CO problems.</li> <li>Achieves superior performance across 10 representative large-scale CO problems.</li> </ul> <p><img src="assets/udc_img/table_1.png" alt="poster"/></p> <hr/> <h3 id="introduction">Introduction</h3> <p><strong>Combinatorial Optimization (CO) Applications</strong></p> <ul> <li>Route planning</li> <li>Circuit design</li> <li>Biology</li> </ul> <p><strong>Reinforcement Learning (RL)-based Constructive Neural Combinatorial Optimization (NCO) Methods</strong></p> <ul> <li>Generate near-optimal solutions for small-scale instances (e.g., TSP instances with up to 200 nodes) without requiring expert knowledge.</li> <li>Construct solutions in an end-to-end manner, node-by-node.</li> <li>Limited capability when applied to large-scale instances.</li> </ul> <p><strong>Categories of NCO Methods</strong></p> <ol> <li><strong>Modified Single-Stage Solvers</strong> <ul> <li>Methods like BQ-NCO and LEHD develop sub-path construction using heavy decoders.</li> <li>Require supervised learning (SL), limiting applicability when high-quality labeled solutions are unavailable.</li> </ul> </li> <li><strong>Auxiliary Information for RL-Based Solvers</strong> <ul> <li>Methods like ELG, ICAM, and DAR use auxiliary information to guide solvers.</li> <li>Problem-specific auxiliary designs limit general applicability.</li> <li>Complexity issues arise, particularly with self-attention mechanisms (e.g., $O(N^2)$ complexity).</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Inspired by traditional heuristic divide-and-conquer methods.</li> <li>Use a two-stage approach: dividing the instance and conquering sub-problems.</li> <li>Methods like TAM, H-TSP, and GLOP show improved efficiency in large-scale TSP and CVRP problems.</li> </ul> </li> </ol> <p><strong>Challenges in Large-Scale NCO</strong></p> <ul> <li>Heavy models requiring SL are limited by the availability of labeled solutions.</li> <li>Self-attention complexity $O(N^2)$ hinders scalability.</li> <li>Problem-specific auxiliary information limits general applicability.</li> </ul> <h3 id="shortcomings-of-neural-divide-and-conquer-approaches">Shortcomings of Neural Divide-and-Conquer Approaches</h3> <p><strong>Limitations in Applicability and Solution Quality</strong></p> <ul> <li>Rely on problem-specific heuristics in either the dividing (e.g., GLOP, SO) or conquering (e.g., L2D, RBG) stages, which limits generalizability.</li> </ul> <p><strong>Issues with Separate Training Process</strong></p> <ul> <li>Dividing and conquering policies are trained separately, which fails to consider their interdependencies, often resulting in convergence to local optima.</li> </ul> <p><strong>Importance of Mitigating Sub-Optimal Dividing Impact</strong></p> <ul> <li>Addressing suboptimal dividing is crucial for achieving high-quality solutions.</li> </ul> <h3 id="proposed-approach">Proposed Approach</h3> <p><strong>Divide-Conquer-Reunion (DCR)</strong></p> <ul> <li>A novel RL-based training method designed to consider interdependencies between dividing and conquering stages.</li> </ul> <p><strong>Unified Neural Divide-and-Conquer Framework (UDC)</strong></p> <ul> <li>Incorporates DCR in a unified training scheme.</li> <li>Uses a lightweight GNN to efficiently decompose large-scale instances into manageable sub-problems.</li> <li>Constructive solvers then effectively solve these sub-problems.</li> </ul> <p><strong>Contributions</strong></p> <ul> <li>Propose DCR to mitigate the impact of suboptimal dividing policies.</li> <li>Achieve a unified training scheme in UDC, leading to improved performance.</li> <li>Demonstrate UDC’s applicability across various CO problems.</li> </ul> <hr/> <h3 id="preliminaries-neural-divide-and-conquer">Preliminaries: Neural Divide-and-Conquer</h3> <p><strong>CO Problem Definition</strong></p> <ul> <li>Involves $N$ decision variables.</li> <li>Objective: Minimize function $f(x, G)$, where $G$ is the CO instance, and $\Omega$ is the set of feasible solutions. \(\text{minimize}_ f(x, \mathcal{G})\)</li> </ul> <p><strong>Divide-and-Conquer in CO</strong></p> <ul> <li><strong>Traditional Methods</strong> <ul> <li>Use heuristic algorithms like large-neighborhood-search to divide and conquer.</li> <li>Dividing stage selects sub-problems, and conquering stage repairs sub-problems.</li> </ul> </li> <li><strong>Neural Divide-and-Conquer Methods</strong> <ul> <li>Dividing policy $\pi_d(G)$ decomposes instance $G$ into sub-problems.</li> <li>Conquering policy $\pi_c$ solves each sub-problem, and the total solution is obtained by concatenating sub-solutions.</li> </ul> </li> </ul> <h3 id="constructive-neural-solver">Constructive Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Efficient for small-scale CO problems.</li> <li>Uses an attention-based encoder-decoder network to construct solutions.</li> </ul> <p><strong>Training Process</strong></p> <ul> <li>Modeled as a Markov Decision Process (MDP).</li> <li>Trained using Deep Reinforcement Learning (DRL) without expert experience.</li> </ul> <p><strong>Solution Generation</strong></p> <ul> <li>Constructs solutions step-by-step using a trained policy $\pi$.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = \prod_{t=1}^{\tau} p_{\theta}(x_t \mid x_{1:t-1}, \mathcal{G}, \Omega)\] <h3 id="heatmap-based-neural-solver">Heatmap-Based Neural Solver</h3> <p><strong>Overview</strong></p> <ul> <li>Uses lightweight GNNs for problem-solving, especially for large-scale CO problems like VRPs.</li> </ul> <p><strong>Limitations</strong></p> <ul> <li><strong>Non-Autoregressive Generation</strong>: Lacks partial solution order information, which can lead to poor solution quality.</li> <li><strong>Search Algorithm Dependence</strong>: Relies on search algorithms for high-quality solutions.</li> </ul> \[\pi(x \mid \mathcal{G}, \Omega, \theta) = p_{\theta}(\mathcal{H} \mid \mathcal{G}, \Omega) p(x_1) \prod_{t=2}^{\tau} \frac{\exp(\mathcal{H}_{x_{t-1}, x_t})}{\sum_{i=t}^{N} \exp(\mathcal{H}_{x_{t-1}, x_i})},\] <hr/> <h3 id="methodology-unified-divide-and-conquer-udc">Methodology: Unified Divide-and-Conquer (UDC)</h3> <p><img src="udc_img/figure_1.png" alt="poster"/></p> <h4 id="general-framework">General Framework</h4> <ul> <li><strong>Two Stages</strong>: Dividing and Conquering.</li> <li><strong>Dividing Stage</strong>: Generates initial solutions using an Anisotropic GNN (AGNN).</li> <li><strong>Conquering Stage</strong>: Decomposes the original instance into sub-problems and solves them using constructive neural solvers.</li> </ul> <p><strong>Solver Integration</strong></p> <ul> <li>Different solvers are used based on the type of CO problem.</li> <li><strong>AGNN</strong> for Maximum Independent Set (MIS).</li> <li><strong>POMO</strong> for Vehicle Routing Problem (VRP).</li> <li><strong>ICAM</strong> for 0-1 Knapsack Problem (KP).</li> </ul> <p><strong>Dividing Stage</strong></p> \[\pi_d(x_0|\mathcal{G}_D, \Omega, \phi) = \begin{cases} p(\mathcal{H}|\mathcal{G}_D, \Omega, \phi) p(x_{0,1}) \prod_{t=2}^\tau \frac{\exp(\mathcal{H}_{x_0, t-1, x_0, t})}{\sum_{i=t}^N \exp(\mathcal{H}_{x_0, t-1, x_0, i})}, &amp; \text{if } x_0 \in \Omega \\ 0, &amp; \text{otherwise} \end{cases}\] <ul> <li>original CO instance $\mathcal{G}$</li> <li>sparse graph $\mathcal{G}_D = { \mathbb{V}, \mathbb{E} }$</li> <li>parameter $\phi$ of Anisotropic Graph Neural Networks (AGNN)</li> <li>heatmap $\mathcal{H}$ (e.g For $N$-node VRPs, the heatmap $\mathcal{H} \in \mathbb{R}^{N×N}$ )</li> <li>initial solution $x_0 = (x_{0,1},…,x_{0,\tau})$, $\tau$ is length</li> </ul> <p><strong>Conquering Stage: Sub-problem Preparation</strong></p> <ul> <li>sub-problems ${ \mathcal{G}<em>1,…, \mathcal{G}</em>{\lfloor \frac{N}{n} \rfloor} }$</li> <li>${ \Omega_1,…, \Omega_{\lfloor \frac{N}{n} \rfloor} }$ constraints of sub-problems (e.g no self-loop in sub-TSPs)</li> </ul> <p><strong>Conquering Stage: Constructive Neural Conquering</strong></p> <p>\(\pi_c(s_k|\mathcal{G}_k, \Omega_k, \theta) = \begin{cases} \prod_{t=1}^n p(s_{k,t} | s_{k,1:t-1}, \mathcal{G}_k, \Omega_k, \theta), &amp; \text{if } s_k \in \Omega_k \\ 0, &amp; \text{otherwise} \end{cases}\)</p> <ul> <li>utilize constructive solvers with parameter $\theta$ for most involved sub-CO problems.</li> <li>sub-solution $s_{k} = (s_{k,1},…,s_{k,n})$, $k \in { 1,…, \lfloor \frac{N}{n} \rfloor}$</li> <li>conquering policy $\pi_c$</li> <li>Replacement of original solution fragments in the final conquering stage: sub-solutions with improvements on the objective function replace the original solution fragment in $x_0$</li> <li>Formation of merged solution: the merged solution becomes $x_1$</li> <li>Repeated execution of conquering stage: conquering stage can be executed repeatedly on the new merged solution</li> <li>Gradual improvement in solution quality: the solution after $r$ conquering stages is noted as $x_r$</li> </ul> <h3 id="training-method-divide-conquer-reunion-dcr">Training Method: Divide-Conquer-Reunion (DCR)</h3> <p><img src="udc_img/figure_2.png" alt="poster"/></p> <ul> <li>Dividing and conquering stages modeled as MDPs.</li> <li>Separate training for conquering and dividing policies.</li> <li>Need for problem-specific datasets.</li> <li>Lack of collaboration in optimizing policies.</li> <li>Impact of sub-optimal sub-problem decomposition.</li> <li>Divide-Conquer-Reunion (DCR) process introduction.</li> <li>Additional Reunion step for better integration of sub-problems.</li> <li>Improved stability and convergence in training.</li> <li>Use of REINFORCE algorithm for unified training.</li> <li>Baseline calculation for both dividing and conquering policies.</li> </ul> <table> <tbody> <tr> <td>$$\nabla \mathcal{L}d(\mathcal{G}) = \frac{1}{\alpha} \sum_{i=1}^\alpha \left( f(x_2^i, \mathcal{G}) - \frac{1}{\alpha} \sum_{j=1}^\alpha f(x_2^j, \mathcal{G}) \right) \nabla \log \pi_d(x_2^i</td> <td>\mathcal{G}_D, \Omega, \phi) $$</td> </tr> <tr> <td>$$\nabla \mathcal{L}{c1}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{1,i}, \mathcal{G}<em>{c}^0) - \frac{1}{\beta} \sum</em>{j=1}^\beta f{\prime}(s_{c}^{1,j}, \mathcal{G}<em>{c}^0) \right) \nabla \log \pi_c(s</em>{c}^{1,j}</td> <td>\mathcal{G}<em>{c}^0, \Omega</em>{c}, \theta) \right)$$</td> </tr> <tr> <td>$$\nabla \mathcal{L}{c2}(\mathcal{G}) = \frac{1}{\alpha \beta \lfloor \frac{N}{n} \rfloor} \sum_{c=1}^{\alpha \lfloor \frac{N}n \rfloor} \sum_{i=1}^\beta \left( \left( f{\prime}(s_{c}^{2,i}, \mathcal{G}<em>{c}^1) - \frac{1}{\beta} \sum</em>{j=1}^\beta f{\prime}(s_{c}^{2,j}, \mathcal{G}<em>{c}^1) \right) \nabla \log \pi_c(s</em>{c}^{2,j}</td> <td>\mathcal{G}<em>{c}^1, \Omega</em>{c}, \theta) \right)$$</td> </tr> </tbody> </table> <ul> <li>${ x_2^1, …, x_{2}^{\alpha} }$ represents the $\alpha$ sampled solutions.</li> <li>there are $\alpha \lfloor \frac{N}{n} \rfloor$ sub-problems $\mathcal{G}^{0}<em>{c},c \in { 1, …, \lfloor \frac{N}{n} \rfloor, …, \alpha \lfloor \frac{N}{n} \rfloor}$ generated based on ${ x_0^1, …, x</em>{0}^{\alpha} }$ in the first conquering stage</li> <li>$\alpha \lfloor \frac{N}{n} \rfloor$ can be regarded as the batch size of sub-problems</li> <li>The $\beta$ sampled sub-solutions for sub-problem $\mathcal{G}<em>{c}^{0}, \mathcal{G}</em>{c}^{1},c \in {1,…, \alpha \lfloor \frac{N}{n} \rfloor}$ are noted as ${s_{c}^{1,i},…,s_{c}^{1,\beta}},{s_{c}^{2,i},…,s_{c}^{2,i}}$.</li> </ul> <p><strong>Challenges and Proposed Solution</strong></p> <ul> <li>Existing methods fail to train dividing and conquering policies simultaneously, leading to unsolvable antagonisms.</li> <li><strong>Unified Training Requirement</strong>: DCR enables collaborative optimization of dividing and conquering policies by treating connections between sub-problems as new problems to reconquer.</li> </ul> <p><strong>Training Process with REINFORCE</strong></p> <ul> <li>Uses the REINFORCE algorithm to train both dividing and conquering policies, ensuring better reward estimation and improved convergence.</li> </ul> <h3 id="application-general-co-problems">Application: General CO Problems</h3> <p><strong>Conditions for Applicability</strong></p> <ol> <li><strong>Decomposable Objective Functions</strong>: The objective function must contain decomposable aggregate functions (i.e., no functions like Rank or Top-k).</li> <li><strong>Feasibility of Initial and Sub-Solutions</strong>: Ensured using feasibility masks.</li> <li><strong>Non-Uniqueness of Sub-Problem Solutions</strong>: Solutions for sub-problems should not be unique to ensure flexibility in merging sub-solutions.</li> </ol> <p><strong>Limitations</strong></p> <ul> <li>Complex CO problems may face issues where solutions cannot be guaranteed as legal through the process, limiting applicability.</li> <li>Problems such as TSPTW may have constraints that make ensuring legal initial and sub-solutions difficult.</li> </ul> <hr/> <h3 id="experiment">Experiment</h3> <p><img src="udc_img/table_2.png" alt="poster"/> <img src="udc_img/table_3.png" alt="poster"/> <img src="udc_img/table_4.png" alt="poster"/> <img src="udc_img/figure_3.png" alt="poster"/></p> <p><strong>Overview</strong></p> <ul> <li>To verify the applicability and efficiency of UDC, experiments were conducted across 10 different CO problems, including TSP, CVRP, KP, MIS, and more.</li> <li>UDC was compared to both classical and neural solvers.</li> </ul> <p><strong>Performance Evaluation</strong></p> <ul> <li>UDC demonstrated superior performance in terms of solution quality and computational efficiency across large-scale CO instances, ranging from 500-node to 2,000-node problems.</li> </ul> <p><strong>Comparison to Baselines</strong></p> <ul> <li>Classical solvers like LKH and other neural methods (e.g., ELG, GLOP) were used as baselines.</li> <li>UDC consistently outperformed other methods, particularly in large-scale settings where scalability is critical.</li> </ul> <hr/> <h3 id="conclusion">Conclusion</h3> <p><strong>Summary</strong></p> <ul> <li>UDC, with its novel DCR training mechanism, successfully addresses the limitations of existing neural divide-and-conquer methods for large-scale CO problems.</li> <li>The unified training scheme ensures that both dividing and conquering stages work in synergy, thereby achieving better overall optimization.</li> </ul> <p><strong>Future Work</strong></p> <ul> <li>Further improvements can be made by designing better loss functions for training.</li> <li>Extending UDC’s applicability to other complex CO problems not covered in the current study is another promising direction for future research.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="Divide-and-Conquer,"/><category term="Optimization"/><summary type="html"><![CDATA[A Unified Neural Divide-and-Conquer Framework for Large-Scale Combinatorial Optimization Problems]]></summary></entry><entry><title type="html">a post with tabs2</title><link href="https://optreal.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs2"/><published>2024-05-02T00:32:13+00:00</published><updated>2024-05-02T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="d7e7f8aa-2d9f-4b38-a48f-40b5a7f6d0a0" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="d7e7f8aa-2d9f-4b38-a48f-40b5a7f6d0a0" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="66d092e1-d9c4-4ef7-9dfc-0fc038090120" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="66d092e1-d9c4-4ef7-9dfc-0fc038090120" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="a4b6bf60-483d-4dbc-87ac-ba061f74bc08" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="a4b6bf60-483d-4dbc-87ac-ba061f74bc08" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://optreal.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://optreal.github.io/blog/2024/tabs</id><content type="html" xml:base="https://optreal.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="4aa3de90-7d9b-40c0-aa46-b4aa7f5f1b6c" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="4aa3de90-7d9b-40c0-aa46-b4aa7f5f1b6c" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="43ae3a02-922c-4a58-9558-692fb01f19a9" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="43ae3a02-922c-4a58-9558-692fb01f19a9" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="9f1c7a6e-2452-450c-bd4f-5d32105a06c5" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="9f1c7a6e-2452-450c-bd4f-5d32105a06c5" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://optreal.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://optreal.github.io/blog/2024/typograms</id><content type="html" xml:base="https://optreal.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://optreal.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://optreal.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://optreal.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://optreal.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://optreal.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://optreal.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://optreal.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://optreal.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://optreal.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></pre></td></tr></tbody></table></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://optreal.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://optreal.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://optreal.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>